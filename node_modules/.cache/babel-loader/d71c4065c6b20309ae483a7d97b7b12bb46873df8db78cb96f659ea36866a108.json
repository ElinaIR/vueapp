{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { API } from '../axios-api';\nimport { mapState } from 'vuex';\nimport Navbar from '../components/Navbar.vue';\nexport default {\n  name: 'MyTests',\n  components: {\n    Navbar\n  },\n  data() {\n    return {\n      profile: '',\n      decks: [],\n      loaded: false\n    };\n  },\n  computed: {\n    ...mapState(['accessToken', 'user'])\n  },\n  created() {\n    API.get('/cards/profiles').then(response => {\n      console.log(response.data);\n      let profiles = response.data;\n      profiles.forEach(p => {\n        if (p.user.id == this.user.id) {\n          this.profile = p;\n        }\n      });\n      console.log(this.profile);\n      API.get('/cards/decks').then(response => {\n        console.log(response.data);\n        let decks = response.data;\n        decks.forEach(d => {\n          if (d.creator.id == this.user.id) {\n            this.decks.push(d);\n          }\n        });\n        console.log(this.decks);\n        this.loaded = true;\n      }).catch(err => {\n        console.log(err);\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  },\n  methods: {\n    closest_date(id) {\n      var closest = new Date('NaN');\n      let cards = this.cards;\n      cards.forEach(card => {\n        if (card.original_card.deck.id == id) {\n          if (!isNaN(closest)) {\n            let next = new Date(card.next_review);\n            if (next.getTime() < closest.getTime()) {\n              closest = next;\n            }\n          } else {\n            closest = new Date(card.next_review);\n          }\n        }\n      });\n      if (isNaN(closest)) {\n        return '';\n      } else return `Следующее повторение: ${closest.getDate()}.${closest.getMonth() + 1}.${closest.getFullYear()}`;\n    },\n    cards_to_review(id) {\n      let today = new Date();\n      let k = 0;\n      let cards = this.cards;\n      cards.forEach(card => {\n        if (card.original_card.deck.id == id) {\n          let next = new Date(card.next_review);\n          if (next.getTime() <= today.getTime()) {\n            k++;\n          }\n        }\n      });\n      return k;\n    }\n  }\n};","map":{"version":3,"names":["API","mapState","Navbar","name","components","data","profile","decks","loaded","computed","created","get","then","response","console","log","profiles","forEach","p","user","id","d","creator","push","catch","err","methods","closest_date","closest","Date","cards","card","original_card","deck","isNaN","next","next_review","getTime","getDate","getMonth","getFullYear","cards_to_review","today","k"],"sources":["/Users/elinaigdavletova/Documents/Интернет_программирование/GQW/frontend/vueapp/src/card_views/MyTests.vue"],"sourcesContent":["<template>\n    <Navbar></Navbar>\n    <div class=\"container\">\n        <h1 class=\"my-3\"> Мои стопки </h1>\n        <router-link :to=\"{ name: 'create-deck' }\" class=\"btn btn-outline-secondary btn-sm\" v-if=\"profile.role == 1\">Создать\n            стопку</router-link>\n        <div class=\"d-flex flex-wrap mt-2\" v-if=\"loaded\">\n            <div class=\"card m-2 col-5\" v-for=\"deck in decks\" :key=\"deck.id\">\n                <div class=\"card-body\">\n                    <div class=\"d-flex justify-content-between\">\n                        <div>\n                            <h5 class=\"card-title\"><router-link :to=\"{ name: 'deck', params: { slug: deck.slug } }\"\n                                    class=\"text-reset text-decoration-none\">{{ deck.title }}</router-link></h5>\n                            <h6 class=\"card-subtitle mb-2 text-muted\">{{ deck.creator.username }}, {{ deck.creation_date }}\n                            </h6>\n                            <p class=\"card-text\">{{ deck.desc }}</p>\n                        </div>\n                        <div class=\"col-5 d-flex flex-column justify-content-around\">\n                            <router-link :to=\"{ name: 'my-test', params: { slug: deck.slug } }\" class=\"btn btn-primary\">Посмотреть</router-link>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <small class=\"text-muted\">{{ closest_date(deck.id) }}</small>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"text-center\">\n        </div>\n    </div>\n</template>\n\n<script>\nimport { API } from '../axios-api'\nimport { mapState } from 'vuex'\nimport Navbar from '../components/Navbar.vue'\nexport default {\n    name: 'MyTests',\n    components: {\n        Navbar\n    },\n    data() {\n        return {\n            profile: '',\n            decks: [],\n            loaded: false,\n        }\n    },\n    computed: {\n        ...mapState(['accessToken', 'user']),\n    },\n    created() {\n        API.get('/cards/profiles').then(response => {\n            console.log(response.data)\n            let profiles = response.data\n            profiles.forEach(p => {\n                if (p.user.id == this.user.id) {\n                    this.profile = p\n                }\n            })\n            console.log(this.profile)\n\n            API.get('/cards/decks').then(response => {\n                console.log(response.data)\n                let decks = response.data\n                decks.forEach(d => {\n                    if (d.creator.id == this.user.id) {\n                        this.decks.push(d)\n                    }\n                })\n                console.log(this.decks)\n                this.loaded = true\n            }).catch(err => {\n                console.log(err)\n            })\n        }).catch(err => {\n            console.log(err)\n        })\n    },\n    methods: {\n        closest_date(id) {\n            var closest = new Date('NaN');\n            let cards = this.cards\n            cards.forEach(card => {\n                if (card.original_card.deck.id == id) {\n                    if (!isNaN(closest)) {\n                        let next = new Date(card.next_review)\n                        if (next.getTime() < closest.getTime()) {\n                            closest = next\n                        }\n                    }\n                    else {\n                        closest = new Date(card.next_review)\n                    }\n                }\n            })\n            if (isNaN(closest)) {\n                return ''\n            }\n            else return `Следующее повторение: ${closest.getDate()}.${closest.getMonth() + 1}.${closest.getFullYear()}`\n        },\n        cards_to_review(id) {\n            let today = new Date()\n            let k = 0\n            let cards = this.cards\n            cards.forEach(card => {\n                if (card.original_card.deck.id == id) {\n                    let next = new Date(card.next_review)\n                    if (next.getTime() <= today.getTime()) {\n                        k++\n                    }\n                }\n            })\n            return k\n        }\n    }\n}\n</script>\n\n<style scoped></style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}