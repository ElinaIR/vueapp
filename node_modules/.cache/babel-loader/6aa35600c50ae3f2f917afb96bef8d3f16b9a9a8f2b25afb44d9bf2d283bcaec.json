{"ast":null,"code":"import { API } from '../axios-api';\nimport { mapState } from 'vuex';\nimport Navbar from '../components/Navbar.vue';\nimport { saveAs } from 'save-as';\nimport { JSZip } from 'jszip';\nimport { JSZipUtils } from 'jszip-utils';\nexport default {\n  name: 'VariantList',\n  components: {\n    Navbar\n  },\n  data() {\n    return {\n      APIData: []\n    };\n  },\n  computed: mapState(['accessToken', 'user']),\n  created() {\n    API.get(`/${this.$route.params.exam}/variants`).then(response => {\n      console.log(response.data);\n      this.APIData = response.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  },\n  methods: {\n    downloadAll() {\n      var zip = new JSZip();\n      var zipFilename = '';\n      if (this.$route.params.exam == 'ege') {\n        zipFilename = 'ЕГЭ.zip';\n      } else if (this.$route.params.exam == 'oge') {\n        zipFilename = 'ОГЭ.zip';\n      } else if (this.$route.params.exam == 'vpr') {\n        zipFilename = 'ВПР.zip';\n      }\n      let variants = this.APIData;\n      variants.forEach(v => {\n        if (v.pdf) {\n          var filename = `${v.name}.pdf`;\n          var url = 'http://127.0.0.1:8000' + v.pdf;\n          JSZipUtils.getBinaryContent(url, (err, data) => {\n            try {\n              zip.file(filename, data, {\n                binary: true\n              });\n            } catch (err) {\n              console.log(err);\n            }\n          });\n        }\n      });\n      zip.generateAsync({\n        type: 'blob'\n      }).then(content => {\n        saveAs(content, zipFilename);\n      });\n    }\n  }\n};","map":{"version":3,"names":["API","mapState","Navbar","saveAs","JSZip","JSZipUtils","name","components","data","APIData","computed","created","get","$route","params","exam","then","response","console","log","catch","err","methods","downloadAll","zip","zipFilename","variants","forEach","v","pdf","filename","url","getBinaryContent","file","binary","generateAsync","type","content"],"sources":["/Users/elinaigdavletova/Documents/Интернет_программирование/GQW/frontend/vueapp/src/views/VariantList.vue"],"sourcesContent":["<template>\n    <Navbar></Navbar>\n    <div class=\"container-sm\">\n        <strong><h1 class=\"text-center mt-5 gradient_text text-uppercase\"> Варианты </h1></strong>\n        <div class=\"w-75 mx-auto my-5 d-flex justify-content-around flex-wrap\" >\n            <div v-for=\"variant in APIData\" :key=\"variant.id\">\n                <div class=\"d-flex flex-column\">\n                    <router-link :to = \"{ name: 'ege-task1', params: { exam: this.$route.params.exam, id: variant.id } }\" exact class=\"btn format_btn m-2\"> {{ variant.name }} </router-link>\n                    <router-link :to = \"{ name: 'edit-variant', params: { exam: this.$route.params.exam, id: variant.id } }\" exact v-if=\"(accessToken != null) && (user.userprofile.role == 1) && (variant.creator.id == user.id)\" class=\"link-dark\"><small> Редактировать </small></router-link>\n                </div>\n            </div>\n        </div>\n        <div class=\"text-center\">\n            <router-link :to = \"{ name: 'add-variant', params: { exam: this.$route.params.exam } }\" exact v-if=\"(accessToken != null) && (user.userprofile.role == 1)\" class=\"btn btn-outline-warning\"> Добавить вариант </router-link>\n        </div>\n\n        <button class=\"btn btn-outline-dark\" @click=\"downloadAll()\">Скачать все варианты</button>\n    </div>\n\n</template>\n\n<script>\n    import { API } from '../axios-api'\n    import { mapState } from 'vuex'\n    import Navbar from '../components/Navbar.vue'\n    import { saveAs } from 'save-as'\n    import { JSZip } from 'jszip'\n    import { JSZipUtils } from 'jszip-utils'\n\n    export default {\n        name: 'VariantList',\n        components: {\n            Navbar\n        },\n        data() {\n            return {\n                APIData: []\n            }\n        },\n        computed: mapState(['accessToken', 'user']),\n        created() {\n            API.get(`/${this.$route.params.exam}/variants`).then(response => {\n                console.log(response.data)\n                this.APIData = response.data\n            }).catch(err => {\n                console.log(err)\n            })\n        },\n        methods: {\n            downloadAll() {\n                var zip = new JSZip()\n                var zipFilename = ''\n                if (this.$route.params.exam == 'ege') {\n                    zipFilename = 'ЕГЭ.zip'\n                }\n                else if (this.$route.params.exam == 'oge') {\n                    zipFilename = 'ОГЭ.zip'\n                }\n                else if (this.$route.params.exam == 'vpr') {\n                    zipFilename = 'ВПР.zip'\n                }\n                let variants = this.APIData\n                variants.forEach(v => {\n                    if (v.pdf) {\n                        var filename = `${v.name}.pdf`\n                        var url = 'http://127.0.0.1:8000' + v.pdf\n                        JSZipUtils.getBinaryContent(url, (err, data) => {\n                            try {\n                                zip.file(filename, data, {binary: true})\n                            } catch (err) {\n                                console.log(err)\n                            }\n                        })\n                    }\n                })\n\n                zip.generateAsync({type:'blob'}).then(content => {\n                    saveAs(content, zipFilename)\n                })\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    .format_btn {\n        background: #FFB904;\n    }\n    .format_btn:hover {\n        background: linear-gradient(to bottom right, #FFB904, #F2DB9F, #FFB904);\n        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\n    }\n    .gradient_text {\n        background-image: linear-gradient(#006CB5, transparent);\n        background-size: 100%;\n        -webkit-background-clip: text;\n        -moz-background-clip: text;\n        -webkit-text-fill-color: transparent; \n        -moz-text-fill-color: transparent;\n    }\n</style>"],"mappings":"AAsBI,SAASA,GAAE,QAAS,cAAa;AACjC,SAASC,QAAO,QAAS,MAAK;AAC9B,OAAOC,MAAK,MAAO,0BAAyB;AAC5C,SAASC,MAAK,QAAS,SAAQ;AAC/B,SAASC,KAAI,QAAS,OAAM;AAC5B,SAASC,UAAS,QAAS,aAAY;AAEvC,eAAe;EACXC,IAAI,EAAE,aAAa;EACnBC,UAAU,EAAE;IACRL;EACJ,CAAC;EACDM,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,OAAO,EAAE;IACb;EACJ,CAAC;EACDC,QAAQ,EAAET,QAAQ,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;EAC3CU,OAAOA,CAAA,EAAG;IACNX,GAAG,CAACY,GAAG,CAAE,IAAG,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,IAAK,WAAU,CAAC,CAACC,IAAI,CAACC,QAAO,IAAK;MAC7DC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACT,IAAI;MACzB,IAAI,CAACC,OAAM,GAAIQ,QAAQ,CAACT,IAAG;IAC/B,CAAC,CAAC,CAACY,KAAK,CAACC,GAAE,IAAK;MACZH,OAAO,CAACC,GAAG,CAACE,GAAG;IACnB,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACLC,WAAWA,CAAA,EAAG;MACV,IAAIC,GAAE,GAAI,IAAIpB,KAAK,EAAC;MACpB,IAAIqB,WAAU,GAAI,EAAC;MACnB,IAAI,IAAI,CAACZ,MAAM,CAACC,MAAM,CAACC,IAAG,IAAK,KAAK,EAAE;QAClCU,WAAU,GAAI,SAAQ;MAC1B,OACK,IAAI,IAAI,CAACZ,MAAM,CAACC,MAAM,CAACC,IAAG,IAAK,KAAK,EAAE;QACvCU,WAAU,GAAI,SAAQ;MAC1B,OACK,IAAI,IAAI,CAACZ,MAAM,CAACC,MAAM,CAACC,IAAG,IAAK,KAAK,EAAE;QACvCU,WAAU,GAAI,SAAQ;MAC1B;MACA,IAAIC,QAAO,GAAI,IAAI,CAACjB,OAAM;MAC1BiB,QAAQ,CAACC,OAAO,CAACC,CAAA,IAAK;QAClB,IAAIA,CAAC,CAACC,GAAG,EAAE;UACP,IAAIC,QAAO,GAAK,GAAEF,CAAC,CAACtB,IAAK,MAAI;UAC7B,IAAIyB,GAAE,GAAI,uBAAsB,GAAIH,CAAC,CAACC,GAAE;UACxCxB,UAAU,CAAC2B,gBAAgB,CAACD,GAAG,EAAE,CAACV,GAAG,EAAEb,IAAI,KAAK;YAC5C,IAAI;cACAgB,GAAG,CAACS,IAAI,CAACH,QAAQ,EAAEtB,IAAI,EAAE;gBAAC0B,MAAM,EAAE;cAAI,CAAC;YAC3C,EAAE,OAAOb,GAAG,EAAE;cACVH,OAAO,CAACC,GAAG,CAACE,GAAG;YACnB;UACJ,CAAC;QACL;MACJ,CAAC;MAEDG,GAAG,CAACW,aAAa,CAAC;QAACC,IAAI,EAAC;MAAM,CAAC,CAAC,CAACpB,IAAI,CAACqB,OAAM,IAAK;QAC7ClC,MAAM,CAACkC,OAAO,EAAEZ,WAAW;MAC/B,CAAC;IACL;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}