{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"row m-3\"\n};\nconst _hoisted_3 = {\n  class: \"col\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"col-3 d-flex align-items-center\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"selectYear\",\n  class: \"form-label\"\n}, \"Email address\", -1 /* HOISTED */);\nconst _hoisted_6 = {\n  class: \"row\"\n};\nconst _hoisted_7 = {\n  class: \"col-4\"\n};\nconst _hoisted_8 = {\n  class: \"col-4\"\n};\nconst _hoisted_9 = {\n  class: \"col-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Navbar = _resolveComponent(\"Navbar\");\n  const _component_LineChart = _resolveComponent(\"LineChart\");\n  const _component_BarChart = _resolveComponent(\"BarChart\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_Navbar), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [$data.users_loaded ? (_openBlock(), _createBlock(_component_LineChart, {\n    key: 0,\n    options: $data.chartOptions,\n    data: $options.lineChartData\n  }, null, 8 /* PROPS */, [\"options\", \"data\"])) : _createCommentVNode(\"v-if\", true)]), $data.users_loaded ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_hoisted_5, _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select form-select-sm\",\n    \"aria-label\": \".form-select-sm example\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.year = $event),\n    id: \"selectYear\"\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.years, y => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      value: \"y\",\n      key: y\n    }, _toDisplayString(y), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.year]])])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [$data.ege_loaded ? (_openBlock(), _createBlock(_component_BarChart, {\n    key: 0,\n    options: $data.chartOptions,\n    data: $data.egeBarChartData,\n    class: \"col-3\"\n  }, null, 8 /* PROPS */, [\"options\", \"data\"])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_8, [$data.oge_loaded ? (_openBlock(), _createBlock(_component_BarChart, {\n    key: 0,\n    options: $data.chartOptions,\n    data: $data.ogeBarChartData,\n    class: \"col-3\"\n  }, null, 8 /* PROPS */, [\"options\", \"data\"])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_9, [$data.vpr_loaded ? (_openBlock(), _createBlock(_component_BarChart, {\n    key: 0,\n    options: $data.chartOptions,\n    data: $data.vprBarChartData,\n    class: \"col-3\"\n  }, null, 8 /* PROPS */, [\"options\", \"data\"])) : _createCommentVNode(\"v-if\", true)])])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","for","_createVNode","_component_Navbar","_hoisted_1","_hoisted_2","_hoisted_3","$data","users_loaded","_createBlock","_component_LineChart","options","chartOptions","data","$options","lineChartData","_createElementBlock","_hoisted_4","_hoisted_5","year","$event","id","_Fragment","_renderList","years","y","value","key","_hoisted_6","_hoisted_7","ege_loaded","_component_BarChart","egeBarChartData","_hoisted_8","oge_loaded","ogeBarChartData","_hoisted_9","vpr_loaded","vprBarChartData"],"sources":["/Users/elinaigdavletova/Documents/Интернет_программирование/GQW/frontend/vueapp/src/views/Stats.vue"],"sourcesContent":["<template>\n    <Navbar></Navbar>\n    <div class=\"container\">\n        <div class=\"row m-3\">\n            <div class=\"col\">\n                <LineChart v-if=\"users_loaded\" :options=\"chartOptions\" :data=\"lineChartData\"/>\n            </div>\n            <div v-if=\"users_loaded\" class=\"col-3 d-flex align-items-center\">\n                <label for=\"selectYear\" class=\"form-label\">Email address</label>\n                <select class=\"form-select form-select-sm\" aria-label=\".form-select-sm example\" v-model=\"year\" id=\"selectYear\">\n                    <option value=\"y\" v-for=\"y in years\" :key=\"y\">{{ y }}</option>\n                </select>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-4\">\n                <BarChart v-if=\"ege_loaded\" :options=\"chartOptions\" :data=\"egeBarChartData\" class=\"col-3\"/>\n            </div>\n            <div class=\"col-4\">\n                <BarChart v-if=\"oge_loaded\" :options=\"chartOptions\" :data=\"ogeBarChartData\" class=\"col-3\"/>\n            </div>\n            <div class=\"col-4\">\n                <BarChart v-if=\"vpr_loaded\" :options=\"chartOptions\" :data=\"vprBarChartData\" class=\"col-3\"/>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\nimport { API } from '../axios-api'\nimport Navbar from '../components/Navbar.vue'\nimport BarChart from '../components/BarChart.vue'\nimport LineChart from '../components/LineChart.vue'\n\nexport default {\n    name: 'Stats',\n    components: {\n        Navbar, BarChart, LineChart\n    },\n    data() {\n        return {\n            users_loaded: false,\n            ege_loaded: false,\n            oge_loaded: false,\n            vpr_loaded: false,\n            users: [],\n            years: [],\n            year: 2023,\n            egeBarChartData: {\n                labels: [],\n                datasets: [\n                    {\n                        label: 'ЕГЭ',\n                        backgroundColor: 'red',\n                        data: null,\n                    }\n                ]\n            },\n            ogeBarChartData: {\n                labels: [],\n                datasets: [\n                    {\n                        label: 'ОГЭ',\n                        backgroundColor: 'orange',\n                        data: null,\n                    }\n                ]\n            },\n            vprBarChartData: {\n                labels: [],\n                datasets: [\n                    {\n                        label: 'ВПР',\n                        backgroundColor: 'yellow',\n                        data: null,\n                    }\n                ]\n            },\n            chartOptions: {\n                responsive: true\n            }\n        }\n    },\n    async mounted() {\n        await API.get('/users').then(response => {\n            console.log(response.data)\n            this.users = response.data\n            let users = response.data\n            users.forEach(u => {\n                let reg = new Date(u.date_joined)\n                if (!this.years.includes(reg.getFullYear())) {\n                    this.years.push(reg.getFullYear())\n                }\n            })\n            this.users_loaded = true\n        }).catch(err => {\n            console.log(err)\n        })\n        await API.get('/ege/popularity').then(response => {\n            let popularity = response.data\n            let variants = []\n            let data = []\n            let labels = []\n            popularity.forEach(p => {\n                if (variants.includes(p.variant.id)) {\n                    data[variants.findIndex((elem) => elem == p.variant.id)] += 1\n                }\n                else {\n                    variants.push(p.variant.id)\n                    data.push(1)\n                    labels.push(p.variant.name)\n                }\n            })\n            this.egeBarChartData.labels = labels\n            this.egeBarChartData.datasets[0].data = data\n            this.ege_loaded = true\n            console.log(labels, data)\n        }).catch(err => {\n            console.log(err)\n        })\n        await API.get('/oge/popularity').then(response => {\n            let popularity = response.data\n            let variants = []\n            let data = []\n            let labels = []\n            popularity.forEach(p => {\n                if (variants.includes(p.variant.id)) {\n                    data[variants.findIndex((elem) => elem == p.variant.id)] += 1\n                }\n                else {\n                    variants.push(p.variant.id)\n                    data.push(1)\n                    labels.push(p.variant.name)\n                }\n            })\n            this.ogeBarChartData.labels = labels\n            this.ogeBarChartData.datasets[0].data = data\n            this.oge_loaded = true\n            console.log(labels, data)\n        }).catch(err => {\n            console.log(err)\n        })\n        \n        await API.get('/vpr/popularity').then(response => {\n            let popularity = response.data\n            let variants = []\n            let data = []\n            let labels = []\n            popularity.forEach(p => {\n                if (variants.includes(p.variant.id)) {\n                    data[variants.findIndex((elem) => elem == p.variant.id)] += 1\n                }\n                else {\n                    variants.push(p.variant.id)\n                    data.push(1)\n                    labels.push(p.variant.name)\n                }\n            })\n            this.vprBarChartData.labels = labels\n            this.vprBarChartData.datasets[0].data = data\n            console.log(labels, data)\n            this.vpr_loaded = true\n        }).catch(err => {\n            console.log(err)\n        })\n    },\n    computed: {\n        lineChartData() {\n            let chartData = {\n                labels: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\n                datasets: [\n                    {\n                        label: 'Пользователи',\n                        backgroundColor: 'blue',\n                        data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                    }\n                ],\n            }\n\n            let users = this.users\n            users.forEach(u => {\n                let reg = new Date(u.date_joined)\n                if (reg.getFullYear() == this.year) {\n                    chartData.datasets[0].data[reg.getMonth()] += 1\n                }\n            })\n\n            return chartData\n        }\n    }\n}\n</script>\n<style scoped>\n    \n</style>"],"mappings":";;EAESA,KAAK,EAAC;AAAW;;EACbA,KAAK,EAAC;AAAS;;EACXA,KAAK,EAAC;AAAK;;;EAGSA,KAAK,EAAC;;gCAC3BC,mBAAA,CAAgE;EAAzDC,GAAG,EAAC,YAAY;EAACF,KAAK,EAAC;GAAa,eAAa;;EAM3DA,KAAK,EAAC;AAAK;;EACPA,KAAK,EAAC;AAAO;;EAGbA,KAAK,EAAC;AAAO;;EAGbA,KAAK,EAAC;AAAO;;;;;6DApB1BG,YAAA,CAAiBC,iBAAA,GACjBH,mBAAA,CAuBM,OAvBNI,UAuBM,GAtBFJ,mBAAA,CAUM,OAVNK,UAUM,GATFL,mBAAA,CAEM,OAFNM,UAEM,GADeC,KAAA,CAAAC,YAAY,I,cAA7BC,YAAA,CAA8EC,oBAAA;;IAA9CC,OAAO,EAAEJ,KAAA,CAAAK,YAAY;IAAGC,IAAI,EAAEC,QAAA,CAAAC;uFAEvDR,KAAA,CAAAC,YAAY,I,cAAvBQ,mBAAA,CAKM,OALNC,UAKM,GAJFC,UAAgE,E,gBAChElB,mBAAA,CAES;IAFDD,KAAK,EAAC,4BAA4B;IAAC,YAAU,EAAC,yBAAyB;+DAAUQ,KAAA,CAAAY,IAAI,GAAAC,MAAA;IAAEC,EAAE,EAAC;yBAC9FL,mBAAA,CAA8DM,SAAA,QAAAC,WAAA,CAAhChB,KAAA,CAAAiB,KAAK,EAAVC,CAAC;yBAA1BT,mBAAA,CAA8D;MAAtDU,KAAK,EAAC,GAAG;MAAqBC,GAAG,EAAEF;wBAAMA,CAAC;2EADmClB,KAAA,CAAAY,IAAI,E,4CAKrGnB,mBAAA,CAUM,OAVN4B,UAUM,GATF5B,mBAAA,CAEM,OAFN6B,UAEM,GADctB,KAAA,CAAAuB,UAAU,I,cAA1BrB,YAAA,CAA2FsB,mBAAA;;IAA9DpB,OAAO,EAAEJ,KAAA,CAAAK,YAAY;IAAGC,IAAI,EAAEN,KAAA,CAAAyB,eAAe;IAAEjC,KAAK,EAAC;uFAEtFC,mBAAA,CAEM,OAFNiC,UAEM,GADc1B,KAAA,CAAA2B,UAAU,I,cAA1BzB,YAAA,CAA2FsB,mBAAA;;IAA9DpB,OAAO,EAAEJ,KAAA,CAAAK,YAAY;IAAGC,IAAI,EAAEN,KAAA,CAAA4B,eAAe;IAAEpC,KAAK,EAAC;uFAEtFC,mBAAA,CAEM,OAFNoC,UAEM,GADc7B,KAAA,CAAA8B,UAAU,I,cAA1B5B,YAAA,CAA2FsB,mBAAA;;IAA9DpB,OAAO,EAAEJ,KAAA,CAAAK,YAAY;IAAGC,IAAI,EAAEN,KAAA,CAAA+B,eAAe;IAAEvC,KAAK,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}