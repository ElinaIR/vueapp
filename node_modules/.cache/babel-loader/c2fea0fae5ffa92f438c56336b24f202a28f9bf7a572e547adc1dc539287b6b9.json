{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isReactive, isReadonly, unref, ref, computed, watch, reactive, isRef, nextTick, inject, provide, getCurrentInstance, onBeforeMount, onBeforeUnmount } from 'vue-demi';\nfunction unwrapObj(obj) {\n  let ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Object.keys(obj).reduce((o, k) => {\n    if (ignoreKeys.includes(k)) return o;\n    o[k] = unref(obj[k]);\n    return o;\n  }, {});\n}\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\n\n/**\n * Response form a raw Validator function.\n * Should return a Boolean or an object with $invalid property.\n * @typedef {Boolean | { $valid: Boolean }} ValidatorResponse\n */\n\n/**\n * Calls a validation rule by unwrapping its value first from a ref.\n * @param {Validator} rule\n * @param {Ref} value\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @return {Promise<ValidatorResponse> | ValidatorResponse}\n */\n\nfunction callRule(rule, value, siblingState, instance) {\n  return rule.call(instance, unref(value), unref(siblingState), instance);\n}\n/**\n * Normalizes the validator result\n * Allows passing a boolean of an object like `{ $valid: Boolean }`\n * @param {ValidatorResponse} result - Validator result\n * @return {boolean}\n */\n\nfunction normalizeValidatorResponse(result) {\n  return result.$valid !== undefined ? !result.$valid : !result;\n}\n/**\n * Returns the result of an async validator.\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $pending\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Ref<*>[]} watchTargets\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @param {Ref<Number>} $lastCommittedOn\n * @return {{ $invalid: Ref<Boolean>, $unwatch: WatchStopHandle }}\n */\n\nfunction createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref;\n  let watchTargets = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let siblingState = arguments.length > 8 ? arguments[8] : undefined;\n  let $lastInvalidState = arguments.length > 9 ? arguments[9] : undefined;\n  let $lastCommittedOn = arguments.length > 10 ? arguments[10] : undefined;\n  const $invalid = ref(!!$dirty.value);\n  const $pendingCounter = ref(0);\n  $pending.value = false;\n  const $unwatch = watch([model, $dirty].concat(watchTargets, $lastCommittedOn), () => {\n    if (\n    // if $lazy and not dirty, return\n    $lazy && !$dirty.value ||\n    // if in $rewardEarly mode and no previous errors, nothing pending, return\n    $rewardEarly && !$lastInvalidState.value && !$pending.value) {\n      return;\n    }\n    let ruleResult; // make sure we dont break if a validator throws\n\n    try {\n      ruleResult = callRule(rule, model, siblingState, instance);\n    } catch (err) {\n      // convert to a promise, so we can handle it async\n      ruleResult = Promise.reject(err);\n    }\n    $pendingCounter.value++;\n    $pending.value = !!$pendingCounter.value; // ensure $invalid is false, while validator is resolving\n\n    $invalid.value = false;\n    Promise.resolve(ruleResult).then(data => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = data;\n      $invalid.value = normalizeValidatorResponse(data);\n    }).catch(error => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = error;\n      $invalid.value = true;\n    });\n  }, {\n    immediate: true,\n    deep: typeof model === 'object'\n  });\n  return {\n    $invalid,\n    $unwatch\n  };\n}\n/**\n * Returns the result of a sync validator\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {Boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @return {{$unwatch: (function(): {}), $invalid: ComputedRef<boolean>}}\n */\n\nfunction createSyncResult(rule, model, $dirty, _ref2, $response, instance, siblingState, $lastInvalidState) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref2;\n  const $unwatch = () => ({});\n  const $invalid = computed(() => {\n    if (\n    // return early if $lazy mode and not touched\n    $lazy && !$dirty.value ||\n    // If $rewardEarly mode is ON and last invalid was false (no error), return it.\n    // If we want to invalidate, we just flip the last state to true, causing the computed to run again\n    $rewardEarly && !$lastInvalidState.value) {\n      return false;\n    }\n    let returnValue = true;\n    try {\n      const result = callRule(rule, model, siblingState, instance);\n      $response.value = result;\n      returnValue = normalizeValidatorResponse(result);\n    } catch (err) {\n      $response.value = err;\n    }\n    return returnValue;\n  });\n  return {\n    $unwatch,\n    $invalid\n  };\n}\n/**\n * Returns the validation result.\n * Detects async and sync validators.\n * @param {NormalizedValidator} rule\n * @param {Ref<*>} model\n * @param {Ref<boolean>} $dirty\n * @param {GlobalConfig} config - Vuelidate config\n * @param {VueInstance} instance - component instance\n * @param {string} validatorName - name of the current validator\n * @param {string} propertyKey - the current property we are validating\n * @param {string} propertyPath - the deep path to the validated property\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState - the last invalid state\n * @param {Ref<Number>} $lastCommittedOn - the last time $commit was called\n * @return {{ $params: *, $message: Ref<String>, $pending: Ref<Boolean>, $invalid: Ref<Boolean>, $response: Ref<*>, $unwatch: WatchStopHandle }}\n */\n\nfunction createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath, siblingState, $lastInvalidState, $lastCommittedOn) {\n  const $pending = ref(false);\n  const $params = rule.$params || {};\n  const $response = ref(null);\n  let $invalid;\n  let $unwatch;\n  if (rule.$async) {\n    ({\n      $invalid,\n      $unwatch\n    } = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets, siblingState, $lastInvalidState, $lastCommittedOn));\n  } else {\n    ({\n      $invalid,\n      $unwatch\n    } = createSyncResult(rule.$validator, model, $dirty, config, $response, instance, siblingState, $lastInvalidState));\n  }\n  const message = rule.$message;\n  const $message = isFunction(message) ? computed(() => message(unwrapObj({\n    $pending,\n    $invalid,\n    $params: unwrapObj($params),\n    // $params can hold refs, so we unwrap them for easy access\n    $model: model,\n    $response,\n    $validator: validatorName,\n    $propertyPath: propertyPath,\n    $property: propertyKey\n  }))) : message || '';\n  return {\n    $message,\n    $params,\n    $pending,\n    $invalid,\n    $response,\n    $unwatch\n  };\n}\n\n/**\n * Sorts a validation definition into rules, configs and nested validators.\n * @param {Object<NormalizedValidator|Function>} validationsRaw\n * @return {{ rules: Object<NormalizedValidator>, nestedValidators: Object, config: GlobalConfig }}\n */\n\nfunction sortValidations() {\n  let validationsRaw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const validations = unref(validationsRaw);\n  const validationKeys = Object.keys(validations);\n  const rules = {};\n  const nestedValidators = {};\n  const config = {};\n  validationKeys.forEach(key => {\n    const v = validations[key];\n    switch (true) {\n      // If it is already normalized, use it\n      case isFunction(v.$validator):\n        rules[key] = v;\n        break;\n      // If it is just a function, normalize it first\n      // into { $validator: <Fun> }\n\n      case isFunction(v):\n        rules[key] = {\n          $validator: v\n        };\n        break;\n      // Catch $-prefixed properties as config\n\n      case key.startsWith('$'):\n        config[key] = v;\n        break;\n      // If it doesnâ€™t match any of the above,\n      // treat as nestedValidators state property\n\n      default:\n        nestedValidators[key] = v;\n    }\n  });\n  return {\n    rules,\n    nestedValidators,\n    config\n  };\n}\nfunction _empty() {}\nconst ROOT_PATH = '__root';\n/** @typedef {import('vue-demi').ComponentPublicInstance} VueInstance */\n\n/** @typedef {import('vue-demi').ComputedRef} ComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapRef} UnwrapRef */\n\n/** @typedef {import('vue-demi').WatchStopHandle} WatchStopHandle */\n\n/** @typedef {import('vue-demi').WritableComputedRef} WritableComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapNestedRefs} UnwrapNestedRefs */\n\n/**\n * @typedef NormalizedValidator\n * @property {Validator} $validator\n * @property {String | Ref<String> | function(*): string} [$message]\n * @property {Object | Ref<Object>} [$params]\n * @property {Object | Ref<Object>} [$async]\n * @property {Ref<*>[]} [$watchTargets]\n */\n\n/**\n * Raw validator function, before being normalized\n * Can return a Promise or a {@see ValidatorResponse}\n * @typedef {function(*): ((Promise<ValidatorResponse> | ValidatorResponse))} Validator\n */\n\n/**\n * @typedef ErrorObject\n * @property {Ref<String>} $message - Reactive error message\n * @property {Ref<Object>} $params - Params passed from withParams\n * @property {Ref<Boolean>} $pending - If validation is pending\n * @property {String} $property - State key\n * @property {String} $propertyPath - Dot notation path to state\n * @property {String} $validator - Validator name\n * @property {String} $uid - Unique identifier\n */\n\n/**\n * @typedef ValidationResult\n * @property {Ref<Boolean>} $pending\n * @property {Ref<Boolean>} $dirty\n * @property {Ref<Boolean>} $invalid\n * @property {Ref<Boolean>} $error\n * @property {Ref<String>} $path\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} $commit\n */\n\n/**\n * Creates the main Validation Results object for a state tree\n * Walks the tree's top level branches\n * @param {Object<NormalizedValidator>} rules - Rules for the current state tree\n * @param {Object} model - Current state value\n * @param {String} key - Key for the current state tree\n * @param {ResultsStorage} [resultsCache] - A cache map of all the validators\n * @param {String} [path] - the current property path\n * @param {GlobalConfig} [config] - the config object\n * @param {VueInstance} instance\n * @param {ComputedRef<Object>} externalResults\n * @param {Object} siblingState\n * @return {ValidationResult | {}}\n */\n\nfunction _call(body, then, direct) {\n  if (direct) {\n    return then ? then(body()) : body();\n  }\n  try {\n    var result = Promise.resolve(body());\n    return then ? result.then(then) : result;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n/**\n * Collects the validation results of all nested state properties\n * @param {Object<NormalizedValidator|Function>} validations - The validation\n * @param {Object} nestedState - Current state\n * @param {String} path - Path to current property\n * @param {ResultsStorage} resultsCache - Validations cache map\n * @param {GlobalConfig} config - The config object\n * @param {VueInstance} instance - The current Vue instance\n * @param {ComputedRef<object>} nestedExternalResults - The external results for this nested collection\n * @return {Object<string, VuelidateState>}\n */\n\nfunction _callIgnored(body, direct) {\n  return _call(body, _empty, direct);\n}\nfunction _invoke(body, then) {\n  var result = body();\n  if (result && result.then) {\n    return result.then(then);\n  }\n  return then(result);\n}\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\nfunction createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {\n  // collect the property keys\n  const ruleKeys = Object.keys(rules);\n  const cachedResult = resultsCache.get(path, rules);\n  const $dirty = ref(false); // state for the $rewardEarly option\n\n  /** The last invalid state of this property */\n\n  const $lastInvalidState = ref(false);\n  /** The last time $commit was called. Used to re-trigger async calls */\n\n  const $lastCommittedOn = ref(0);\n  if (cachedResult) {\n    // if the rules are the same as before, use the cached results\n    if (!cachedResult.$partial) return cachedResult; // remove old watchers\n\n    cachedResult.$unwatch(); // use the `$dirty.value`, so we dont save references by accident\n\n    $dirty.value = cachedResult.$dirty.value;\n  }\n  const result = {\n    // restore $dirty from cache\n    $dirty,\n    $path: path,\n    $touch: () => {\n      if (!$dirty.value) $dirty.value = true;\n    },\n    $reset: () => {\n      if ($dirty.value) $dirty.value = false;\n    },\n    $commit: () => {}\n  };\n  /**\n   * If there are no validation rules, it is most likely\n   * a top level state, aka root\n   */\n\n  if (!ruleKeys.length) {\n    // if there are cached results, we should overwrite them with the new ones\n    cachedResult && resultsCache.set(path, rules, result);\n    return result;\n  }\n  ruleKeys.forEach(ruleKey => {\n    result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path, siblingState, $lastInvalidState, $lastCommittedOn);\n  });\n  result.$externalResults = computed(() => {\n    if (!externalResults.value) return [];\n    return [].concat(externalResults.value).map((stringError, index) => ({\n      $propertyPath: path,\n      $property: key,\n      $validator: '$externalResults',\n      $uid: `${path}-externalResult-${index}`,\n      $message: stringError,\n      $params: {},\n      $response: null,\n      $pending: false\n    }));\n  });\n  result.$invalid = computed(() => {\n    const r = ruleKeys.some(ruleKey => unref(result[ruleKey].$invalid)); // cache the last invalid state\n\n    $lastInvalidState.value = r;\n    return !!result.$externalResults.value.length || r;\n  });\n  result.$pending = computed(() => ruleKeys.some(ruleKey => unref(result[ruleKey].$pending)));\n  result.$error = computed(() => result.$dirty.value ? result.$pending.value || result.$invalid.value : false);\n  result.$silentErrors = computed(() => ruleKeys.filter(ruleKey => unref(result[ruleKey].$invalid)).map(ruleKey => {\n    const res = result[ruleKey];\n    return reactive({\n      $propertyPath: path,\n      $property: key,\n      $validator: ruleKey,\n      $uid: `${path}-${ruleKey}`,\n      $message: res.$message,\n      $params: res.$params,\n      $response: res.$response,\n      $pending: res.$pending\n    });\n  }).concat(result.$externalResults.value));\n  result.$errors = computed(() => result.$dirty.value ? result.$silentErrors.value : []);\n  result.$unwatch = () => ruleKeys.forEach(ruleKey => {\n    result[ruleKey].$unwatch();\n  });\n  result.$commit = () => {\n    $lastInvalidState.value = true;\n    $lastCommittedOn.value = Date.now();\n  };\n  resultsCache.set(path, rules, result);\n  return result;\n}\nfunction collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  const nestedValidationKeys = Object.keys(validations); // if we have no state, return empty object\n\n  if (!nestedValidationKeys.length) return {};\n  return nestedValidationKeys.reduce((results, nestedKey) => {\n    // build validation results for nested state\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache,\n      globalConfig: config,\n      instance,\n      externalResults: nestedExternalResults\n    });\n    return results;\n  }, {});\n}\n/**\n * Generates the Meta fields from the results\n * @param {ValidationResult|{}} results\n * @param {Object.<string, VuelidateState>} nestedResults\n * @param {Object.<string, ValidationResult>} childResults\n * @return {{$anyDirty: Ref<Boolean>, $error: Ref<Boolean>, $invalid: Ref<Boolean>, $errors: Ref<ErrorObject[]>, $dirty: Ref<Boolean>, $touch: Function, $reset: Function }}\n */\n\nfunction createMetaFields(results, nestedResults, childResults) {\n  const allResults = computed(() => [nestedResults, childResults].filter(res => res).reduce((allRes, res) => {\n    return allRes.concat(Object.values(unref(res)));\n  }, [])); // returns `$dirty` as true, if all children are dirty\n\n  const $dirty = computed({\n    get() {\n      return results.$dirty.value || (allResults.value.length ? allResults.value.every(r => r.$dirty) : false);\n    },\n    set(v) {\n      results.$dirty.value = v;\n    }\n  });\n  const $silentErrors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$silentErrors) || []; // collect all nested and child $silentErrors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$silentErrors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$silentErrors);\n    }, []); // merge the $silentErrors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $errors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$errors) || []; // collect all nested and child $errors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$errors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$errors);\n    }, []); // merge the $errors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $invalid = computed(() =>\n  // if any of the nested values is invalid\n  allResults.value.some(r => r.$invalid) ||\n  // or if the current state is invalid\n  unref(results.$invalid) ||\n  // fallback to false if is root\n  false);\n  const $pending = computed(() =>\n  // if any of the nested values is pending\n  allResults.value.some(r => unref(r.$pending)) ||\n  // if any of the current state validators is pending\n  unref(results.$pending) ||\n  // fallback to false if is root\n  false);\n  const $anyDirty = computed(() => allResults.value.some(r => r.$dirty) || allResults.value.some(r => r.$anyDirty) || $dirty.value);\n  const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false);\n  const $touch = () => {\n    // call the root $touch\n    results.$touch(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$touch();\n    });\n  };\n  const $commit = () => {\n    // call the root $touch\n    results.$commit(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$commit();\n    });\n  };\n  const $reset = () => {\n    // reset the root $dirty state\n    results.$reset(); // reset all the children $dirty states\n\n    allResults.value.forEach(result => {\n      result.$reset();\n    });\n  }; // Ensure that if all child and nested results are $dirty, this also becomes $dirty\n\n  if (allResults.value.length && allResults.value.every(nr => nr.$dirty)) $touch();\n  return {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  };\n}\n/**\n * @typedef VuelidateState\n * @property {WritableComputedRef<any>} $model\n * @property {ComputedRef<Boolean>} $dirty\n * @property {ComputedRef<Boolean>} $error\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<Boolean>} $invalid\n * @property {ComputedRef<Boolean>} $anyDirty\n * @property {ComputedRef<Boolean>} $pending\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {String} $path\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} [$validate]\n * @property {Function} [$getResultsForChild]\n * @property {Object.<string, VuelidateState>}\n */\n\n/**\n * Main Vuelidate bootstrap function.\n * Used both for Composition API in `setup` and for Global App usage.\n * Used to collect validation state, when walking recursively down the state tree\n * @param {Object} params\n * @param {Object<NormalizedValidator|Function>} params.validations\n * @param {Object} params.state\n * @param {String} [params.key] - Current state property key. Used when being called on nested items\n * @param {String} [params.parentKey] - Parent state property key. Used when being called recursively\n * @param {Object<string, ValidationResult>} [params.childResults] - Used to collect child results.\n * @param {ResultsStorage} params.resultsCache - The cached validation results\n * @param {VueInstance} params.instance - The current Vue instance\n * @param {GlobalConfig} params.globalConfig - The validation config, passed to this setValidations instance.\n * @param {UnwrapNestedRefs<object> | Ref<Object>} params.externalResults - External validation results\n * @return {UnwrapNestedRefs<VuelidateState>}\n */\n\nfunction setValidations(_ref) {\n  /**\n   * Executes the validators and returns the result.\n   * @return {Promise<boolean>}\n   */\n  const $validate = _async(function () {\n    $touch();\n    return _invoke(function () {\n      if (mergedConfig.$rewardEarly) {\n        $commit(); // await the watchers\n\n        return _callIgnored(nextTick);\n      }\n    }, function () {\n      // await the watchers\n      return _call(nextTick, function () {\n        return new Promise(resolve => {\n          // return whether it is valid or not\n          if (!$pending.value) return resolve(!$invalid.value);\n          const unwatch = watch($pending, () => {\n            resolve(!$invalid.value);\n            unwatch();\n          });\n        });\n      });\n    });\n  });\n  /**\n   * Returns a child component's results, based on registration name\n   * @param {string} key\n   * @return {VuelidateState}\n   */\n\n  let {\n    validations,\n    state,\n    key,\n    parentKey,\n    childResults,\n    resultsCache,\n    globalConfig = {},\n    instance,\n    externalResults\n  } = _ref;\n  const path = parentKey ? `${parentKey}.${key}` : key; // Sort out the validation object into:\n  // â€“ rules = validators for current state tree fragment\n  // â€” nestedValidators = nested state fragments keys that might contain more validators\n  // â€“ config = configuration properties that affect this state fragment\n\n  const {\n    rules,\n    nestedValidators,\n    config\n  } = sortValidations(validations);\n  const mergedConfig = Object.assign({}, globalConfig, config); // create protected state for cases when the state branch does not exist yet.\n  // This protects when using the OptionsAPI as the data is bound after the setup method\n\n  const nestedState = key ? computed(() => {\n    const s = unref(state);\n    return s ? unref(s[key]) : undefined;\n  }) : state; // cache the external results, so we can revert back to them\n\n  const cachedExternalResults = Object.assign({}, unref(externalResults) || {});\n  const nestedExternalResults = computed(() => {\n    const results = unref(externalResults);\n    if (!key) return results;\n    return results ? unref(results[key]) : undefined;\n  }); // Use rules for the current state fragment and validate it\n\n  const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state); // Use nested keys to repeat the process\n  // *WARN*: This is recursive\n\n  const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults); // Collect and merge this level validation results\n  // with all nested validation results\n\n  const {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  } = createMetaFields(results, nestedResults, childResults);\n  /**\n   * If we have no `key`, this is the top level state\n   * We dont need `$model` there.\n   */\n\n  const $model = key ? computed({\n    get: () => unref(nestedState),\n    set: val => {\n      $dirty.value = true;\n      const s = unref(state);\n      const external = unref(externalResults);\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n      if (isRef(s[key])) {\n        s[key].value = val;\n      } else {\n        s[key] = val;\n      }\n    }\n  }) : null;\n  if (key && mergedConfig.$autoDirty) {\n    watch(nestedState, () => {\n      if (!$dirty.value) $touch();\n      const external = unref(externalResults);\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n    }, {\n      flush: 'sync'\n    });\n  }\n  function $getResultsForChild(key) {\n    return (childResults.value || {})[key];\n  }\n  function $clearExternalResults() {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults;\n    } else {\n      // if the external results state was empty, we need to delete every property, one by one\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach(k => {\n          delete externalResults[k];\n        });\n      } else {\n        // state was not empty, so we just assign it back into the current state\n        Object.assign(externalResults, cachedExternalResults);\n      }\n    }\n  }\n  return reactive(Object.assign({}, results, {\n    // NOTE: The order here is very important, since we want to override\n    // some of the *results* meta fields with the collective version of it\n    // that includes the results of nested state validation results\n    $model,\n    $dirty,\n    $error,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $pending,\n    $touch,\n    $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors,\n    $validate,\n    $commit\n  }, childResults && {\n    $getResultsForChild,\n    $clearExternalResults\n  }, nestedResults));\n}\nclass ResultsStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n  /**\n   * Stores a validation result, and its rules by its path\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {ValidationResult} result\n   */\n\n  set(path, rules, result) {\n    this.storage.set(path, {\n      rules,\n      result\n    });\n  }\n  /**\n   * Check if the stored `results` for the provided `path` have the same `rules` compared to 'storedRules'\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {Object<NormalizedValidator>} storedRules\n   * @return {Boolean}\n   */\n\n  checkRulesValidity(path, rules, storedRules) {\n    const storedRulesKeys = Object.keys(storedRules);\n    const newRulesKeys = Object.keys(rules);\n    if (newRulesKeys.length !== storedRulesKeys.length) return false;\n    const hasAllValidators = newRulesKeys.every(ruleKey => storedRulesKeys.includes(ruleKey));\n    if (!hasAllValidators) return false;\n    return newRulesKeys.every(ruleKey => {\n      if (!rules[ruleKey].$params) return true;\n      return Object.keys(rules[ruleKey].$params).every(paramKey => {\n        // make sure to unwrap before comparing\n        return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);\n      });\n    });\n  }\n  /**\n   * Returns the matched result if catche is valid\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @return {{$partial: boolean, $dirty: Ref<Boolean>, $unwatch: function}|undefined|ValidationResult}\n   */\n\n  get(path, rules) {\n    const storedRuleResultPair = this.storage.get(path);\n    if (!storedRuleResultPair) return undefined;\n    const {\n      rules: storedRules,\n      result\n    } = storedRuleResultPair;\n    const isValidCache = this.checkRulesValidity(path, rules, storedRules);\n    const $unwatch = result.$unwatch ? result.$unwatch : () => ({});\n    if (!isValidCache) return {\n      $dirty: result.$dirty,\n      $partial: true,\n      $unwatch\n    };\n    return result;\n  }\n}\nconst CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n};\nconst VuelidateInjectChildResults = Symbol('vuelidate#injectChildResults');\nconst VuelidateRemoveChildResults = Symbol('vuelidate#removeChildResults');\n/**\n * Create helpers to collect validation state from child components\n * @param {Object} params\n * @param {String | Number | Boolean} params.$scope - Parent component scope\n * @return {{sendValidationResultsToParent: function[], childResults: ComputedRef<Object>, removeValidationResultsFromParent: function[]}}\n */\n\nfunction nestedValidations(_ref) {\n  let {\n    $scope,\n    instance\n  } = _ref;\n  const childResultsRaw = {};\n  const childResultsKeys = ref([]);\n  const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {\n    results[key] = unref(childResultsRaw[key]);\n    return results;\n  }, {}));\n  /**\n   * Allows children to send validation data up to their parent.\n   * @param {Object} results - the results\n   * @param {Object} args\n   * @param {String} args.$registerAs - the $registeredAs key\n   * @param {String | Number | Boolean} args.$scope - the $scope key\n   */\n\n  function injectChildResultsIntoParent(results, _ref2) {\n    let {\n      $registerAs: key,\n      $scope: childScope,\n      $stopPropagation\n    } = _ref2;\n    if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope) return;\n    childResultsRaw[key] = results;\n    childResultsKeys.value.push(key);\n  } // combine with other `injectChildResultsIntoParent` from vuelidate instances in this Vue component instance\n\n  instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent);\n  /**\n   * Allows children to remove the validation data from their parent, before getting destroyed.\n   * @param {String} key - the registeredAs key\n   */\n\n  function removeChildResultsFromParent(key) {\n    // remove the key\n    childResultsKeys.value = childResultsKeys.value.filter(childKey => childKey !== key); // remove the stored data for the key\n\n    delete childResultsRaw[key];\n  } // combine with other `removeChildResultsFromParent` from vuelidate instances in this Vue component instance\n\n  instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent); // inject the `injectChildResultsIntoParent` method, into the current scope\n\n  const sendValidationResultsToParent = inject(VuelidateInjectChildResults, []); // provide to all of its children the send results to parent function\n\n  provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances);\n  const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, []); // provide to all of its children the remove results  function\n\n  provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances);\n  return {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  };\n}\n\n/**\n * Helper proxy for instance property access. It makes every reference\n * reactive for the validation function\n * @param target\n * @return {*|ComputedRef<*>}\n */\n\nfunction ComputedProxyFactory(target) {\n  return new Proxy(target, {\n    get(target, prop) {\n      return typeof target[prop] === 'object' ? ComputedProxyFactory(target[prop]) : computed(() => target[prop]);\n    }\n  });\n}\n\n/**\n * @typedef GlobalConfig\n * @property {String} [$registerAs] - Config Object\n * @property {String | Number | Symbol} [$scope] - A scope to limit child component registration\n * @property {Boolean} [$stopPropagation] - Tells a Vue component to stop sending its results up to the parent\n * @property {Ref<Object>} [$externalResults] - External error messages, like from server validation.\n * @property {Boolean} [$autoDirty] - Should the form watch for state changed, and automatically set `$dirty` to true.\n * @property {Boolean} [$lazy] - Should the validations be lazy, and run only after they are dirty\n * @property {Boolean} [$rewardEarly] - Once valid, re-runs property validators only on manual calls of $commit\n */\n\n/**\n * Composition API compatible Vuelidate\n * Use inside the `setup` lifecycle hook\n * @param {Object | GlobalConfig} [validations] - Validations Object or the globalConfig.\n * @param {Object} [state] - State object - required if `validations` is a validation object.\n * @param {GlobalConfig} [globalConfig] - Config Object\n * @return {ComputedRef<*>}\n */\n\nfunction useVuelidate(validations, state) {\n  let globalConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // if we pass only one argument, its most probably the globalConfig.\n  // This use case is so parents can just collect results of child forms.\n  if (arguments.length === 1) {\n    globalConfig = validations;\n    validations = undefined;\n    state = undefined;\n  }\n  let {\n    $registerAs,\n    $scope = CollectFlag.COLLECT_ALL,\n    $stopPropagation,\n    $externalResults,\n    currentVueInstance\n  } = globalConfig;\n  const instance = currentVueInstance || getCurrentInstance();\n  const componentOptions = instance ? instance.proxy.$options : {}; // if there is no registration name, add one.\n\n  if (!$registerAs && instance) {\n    // NOTE:\n    // ._uid // Vue 2.x Composition-API plugin\n    // .uid // Vue 3.0\n    const uid = instance.uid || instance._uid;\n    $registerAs = `_vuelidate_${uid}`;\n  }\n  const validationResults = ref({});\n  const resultsCache = new ResultsStorage();\n  const {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  } = instance ? nestedValidations({\n    $scope,\n    instance\n  }) : {\n    childResults: ref({})\n  }; // Options API\n\n  if (!validations && componentOptions.validations) {\n    const rules = componentOptions.validations;\n    state = ref({});\n    onBeforeMount(() => {\n      // Delay binding state to validations defined with the Options API until mounting, when the data\n      // has been attached to the component instance. From that point on it will be reactive.\n      state.value = instance.proxy;\n      watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules, validations => {\n        validationResults.value = setValidations({\n          validations,\n          state,\n          childResults,\n          resultsCache,\n          globalConfig,\n          instance: instance.proxy,\n          externalResults: $externalResults || instance.proxy.vuelidateExternalResults\n        });\n      }, {\n        immediate: true\n      });\n    });\n    globalConfig = componentOptions.validationsConfig || globalConfig;\n  } else {\n    const validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations // wrap plain objects in a reactive, so we can track changes if they have computed in them.\n    : reactive(validations || {});\n    watch(validationsWatchTarget, newValidationRules => {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state,\n        childResults,\n        resultsCache,\n        globalConfig,\n        instance: instance ? instance.proxy : {},\n        externalResults: $externalResults\n      });\n    }, {\n      immediate: true\n    });\n  }\n  if (instance) {\n    // send all the data to the parent when the function is invoked inside setup.\n    sendValidationResultsToParent.forEach(f => f(validationResults, {\n      $registerAs,\n      $scope,\n      $stopPropagation\n    })); // before this component is destroyed, remove all the data from the parent.\n\n    onBeforeUnmount(() => removeValidationResultsFromParent.forEach(f => f($registerAs)));\n  }\n  return computed(() => {\n    return Object.assign({}, unref(validationResults.value), childResults.value);\n  });\n}\nexport { CollectFlag, useVuelidate as default, useVuelidate };","map":{"version":3,"names":["isReactive","isReadonly","unref","ref","computed","watch","reactive","isRef","nextTick","inject","provide","getCurrentInstance","onBeforeMount","onBeforeUnmount","unwrapObj","obj","ignoreKeys","arguments","length","undefined","Object","keys","reduce","o","k","includes","isFunction","val","isProxy","value","callRule","rule","siblingState","instance","call","normalizeValidatorResponse","result","$valid","createAsyncResult","model","$pending","$dirty","_ref","$response","$lazy","$rewardEarly","watchTargets","$lastInvalidState","$lastCommittedOn","$invalid","$pendingCounter","$unwatch","concat","ruleResult","err","Promise","reject","resolve","then","data","catch","error","immediate","deep","createSyncResult","_ref2","returnValue","createValidatorResult","config","validatorName","propertyKey","propertyPath","$params","$async","$validator","$watchTargets","message","$message","$model","$propertyPath","$property","sortValidations","validationsRaw","validations","validationKeys","rules","nestedValidators","forEach","key","v","startsWith","_empty","ROOT_PATH","_call","body","direct","e","_callIgnored","_invoke","_async","f","args","i","apply","createValidationResults","resultsCache","path","externalResults","ruleKeys","cachedResult","get","$partial","$path","$touch","$reset","$commit","set","ruleKey","$externalResults","map","stringError","index","$uid","r","some","$error","$silentErrors","filter","res","$errors","Date","now","collectNestedValidationResults","nestedState","nestedExternalResults","nestedValidationKeys","results","nestedKey","setValidations","state","parentKey","globalConfig","createMetaFields","nestedResults","childResults","allResults","allRes","values","every","modelErrors","nestedErrors","errors","$anyDirty","nr","$validate","mergedConfig","unwatch","assign","s","cachedExternalResults","external","$autoDirty","flush","$getResultsForChild","$clearExternalResults","ResultsStorage","constructor","storage","Map","checkRulesValidity","storedRules","storedRulesKeys","newRulesKeys","hasAllValidators","paramKey","storedRuleResultPair","isValidCache","CollectFlag","COLLECT_ALL","COLLECT_NONE","VuelidateInjectChildResults","Symbol","VuelidateRemoveChildResults","nestedValidations","$scope","childResultsRaw","childResultsKeys","injectChildResultsIntoParent","$registerAs","childScope","$stopPropagation","push","__vuelidateInjectInstances","removeChildResultsFromParent","childKey","__vuelidateRemoveInstances","sendValidationResultsToParent","removeValidationResultsFromParent","ComputedProxyFactory","target","Proxy","prop","useVuelidate","currentVueInstance","componentOptions","proxy","$options","uid","_uid","validationResults","vuelidateExternalResults","validationsConfig","validationsWatchTarget","newValidationRules","default"],"sources":["/Users/elinaigdavletova/node_modules/@vuelidate/core/dist/index.esm.js"],"sourcesContent":["import { isReactive, isReadonly, unref, ref, computed, watch, reactive, isRef, nextTick, inject, provide, getCurrentInstance, onBeforeMount, onBeforeUnmount } from 'vue-demi';\n\nfunction unwrapObj(obj) {\n  let ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Object.keys(obj).reduce((o, k) => {\n    if (ignoreKeys.includes(k)) return o;\n    o[k] = unref(obj[k]);\n    return o;\n  }, {});\n}\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\n\n/**\n * Response form a raw Validator function.\n * Should return a Boolean or an object with $invalid property.\n * @typedef {Boolean | { $valid: Boolean }} ValidatorResponse\n */\n\n/**\n * Calls a validation rule by unwrapping its value first from a ref.\n * @param {Validator} rule\n * @param {Ref} value\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @return {Promise<ValidatorResponse> | ValidatorResponse}\n */\n\nfunction callRule(rule, value, siblingState, instance) {\n  return rule.call(instance, unref(value), unref(siblingState), instance);\n}\n/**\n * Normalizes the validator result\n * Allows passing a boolean of an object like `{ $valid: Boolean }`\n * @param {ValidatorResponse} result - Validator result\n * @return {boolean}\n */\n\n\nfunction normalizeValidatorResponse(result) {\n  return result.$valid !== undefined ? !result.$valid : !result;\n}\n/**\n * Returns the result of an async validator.\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $pending\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Ref<*>[]} watchTargets\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @param {Ref<Number>} $lastCommittedOn\n * @return {{ $invalid: Ref<Boolean>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref;\n  let watchTargets = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let siblingState = arguments.length > 8 ? arguments[8] : undefined;\n  let $lastInvalidState = arguments.length > 9 ? arguments[9] : undefined;\n  let $lastCommittedOn = arguments.length > 10 ? arguments[10] : undefined;\n  const $invalid = ref(!!$dirty.value);\n  const $pendingCounter = ref(0);\n  $pending.value = false;\n  const $unwatch = watch([model, $dirty].concat(watchTargets, $lastCommittedOn), () => {\n    if ( // if $lazy and not dirty, return\n    $lazy && !$dirty.value || // if in $rewardEarly mode and no previous errors, nothing pending, return\n    $rewardEarly && !$lastInvalidState.value && !$pending.value) {\n      return;\n    }\n\n    let ruleResult; // make sure we dont break if a validator throws\n\n    try {\n      ruleResult = callRule(rule, model, siblingState, instance);\n    } catch (err) {\n      // convert to a promise, so we can handle it async\n      ruleResult = Promise.reject(err);\n    }\n\n    $pendingCounter.value++;\n    $pending.value = !!$pendingCounter.value; // ensure $invalid is false, while validator is resolving\n\n    $invalid.value = false;\n    Promise.resolve(ruleResult).then(data => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = data;\n      $invalid.value = normalizeValidatorResponse(data);\n    }).catch(error => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = error;\n      $invalid.value = true;\n    });\n  }, {\n    immediate: true,\n    deep: typeof model === 'object'\n  });\n  return {\n    $invalid,\n    $unwatch\n  };\n}\n/**\n * Returns the result of a sync validator\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {Boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @return {{$unwatch: (function(): {}), $invalid: ComputedRef<boolean>}}\n */\n\n\nfunction createSyncResult(rule, model, $dirty, _ref2, $response, instance, siblingState, $lastInvalidState) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref2;\n\n  const $unwatch = () => ({});\n\n  const $invalid = computed(() => {\n    if ( // return early if $lazy mode and not touched\n    $lazy && !$dirty.value || // If $rewardEarly mode is ON and last invalid was false (no error), return it.\n    // If we want to invalidate, we just flip the last state to true, causing the computed to run again\n    $rewardEarly && !$lastInvalidState.value) {\n      return false;\n    }\n\n    let returnValue = true;\n\n    try {\n      const result = callRule(rule, model, siblingState, instance);\n      $response.value = result;\n      returnValue = normalizeValidatorResponse(result);\n    } catch (err) {\n      $response.value = err;\n    }\n\n    return returnValue;\n  });\n  return {\n    $unwatch,\n    $invalid\n  };\n}\n/**\n * Returns the validation result.\n * Detects async and sync validators.\n * @param {NormalizedValidator} rule\n * @param {Ref<*>} model\n * @param {Ref<boolean>} $dirty\n * @param {GlobalConfig} config - Vuelidate config\n * @param {VueInstance} instance - component instance\n * @param {string} validatorName - name of the current validator\n * @param {string} propertyKey - the current property we are validating\n * @param {string} propertyPath - the deep path to the validated property\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState - the last invalid state\n * @param {Ref<Number>} $lastCommittedOn - the last time $commit was called\n * @return {{ $params: *, $message: Ref<String>, $pending: Ref<Boolean>, $invalid: Ref<Boolean>, $response: Ref<*>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath, siblingState, $lastInvalidState, $lastCommittedOn) {\n  const $pending = ref(false);\n  const $params = rule.$params || {};\n  const $response = ref(null);\n  let $invalid;\n  let $unwatch;\n\n  if (rule.$async) {\n    ({\n      $invalid,\n      $unwatch\n    } = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets, siblingState, $lastInvalidState, $lastCommittedOn));\n  } else {\n    ({\n      $invalid,\n      $unwatch\n    } = createSyncResult(rule.$validator, model, $dirty, config, $response, instance, siblingState, $lastInvalidState));\n  }\n\n  const message = rule.$message;\n  const $message = isFunction(message) ? computed(() => message(unwrapObj({\n    $pending,\n    $invalid,\n    $params: unwrapObj($params),\n    // $params can hold refs, so we unwrap them for easy access\n    $model: model,\n    $response,\n    $validator: validatorName,\n    $propertyPath: propertyPath,\n    $property: propertyKey\n  }))) : message || '';\n  return {\n    $message,\n    $params,\n    $pending,\n    $invalid,\n    $response,\n    $unwatch\n  };\n}\n\n/**\n * Sorts a validation definition into rules, configs and nested validators.\n * @param {Object<NormalizedValidator|Function>} validationsRaw\n * @return {{ rules: Object<NormalizedValidator>, nestedValidators: Object, config: GlobalConfig }}\n */\n\nfunction sortValidations() {\n  let validationsRaw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const validations = unref(validationsRaw);\n  const validationKeys = Object.keys(validations);\n  const rules = {};\n  const nestedValidators = {};\n  const config = {};\n  validationKeys.forEach(key => {\n    const v = validations[key];\n\n    switch (true) {\n      // If it is already normalized, use it\n      case isFunction(v.$validator):\n        rules[key] = v;\n        break;\n      // If it is just a function, normalize it first\n      // into { $validator: <Fun> }\n\n      case isFunction(v):\n        rules[key] = {\n          $validator: v\n        };\n        break;\n      // Catch $-prefixed properties as config\n\n      case key.startsWith('$'):\n        config[key] = v;\n        break;\n      // If it doesnâ€™t match any of the above,\n      // treat as nestedValidators state property\n\n      default:\n        nestedValidators[key] = v;\n    }\n  });\n  return {\n    rules,\n    nestedValidators,\n    config\n  };\n}\n\nfunction _empty() {}\n\nconst ROOT_PATH = '__root';\n/** @typedef {import('vue-demi').ComponentPublicInstance} VueInstance */\n\n/** @typedef {import('vue-demi').ComputedRef} ComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapRef} UnwrapRef */\n\n/** @typedef {import('vue-demi').WatchStopHandle} WatchStopHandle */\n\n/** @typedef {import('vue-demi').WritableComputedRef} WritableComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapNestedRefs} UnwrapNestedRefs */\n\n/**\n * @typedef NormalizedValidator\n * @property {Validator} $validator\n * @property {String | Ref<String> | function(*): string} [$message]\n * @property {Object | Ref<Object>} [$params]\n * @property {Object | Ref<Object>} [$async]\n * @property {Ref<*>[]} [$watchTargets]\n */\n\n/**\n * Raw validator function, before being normalized\n * Can return a Promise or a {@see ValidatorResponse}\n * @typedef {function(*): ((Promise<ValidatorResponse> | ValidatorResponse))} Validator\n */\n\n/**\n * @typedef ErrorObject\n * @property {Ref<String>} $message - Reactive error message\n * @property {Ref<Object>} $params - Params passed from withParams\n * @property {Ref<Boolean>} $pending - If validation is pending\n * @property {String} $property - State key\n * @property {String} $propertyPath - Dot notation path to state\n * @property {String} $validator - Validator name\n * @property {String} $uid - Unique identifier\n */\n\n/**\n * @typedef ValidationResult\n * @property {Ref<Boolean>} $pending\n * @property {Ref<Boolean>} $dirty\n * @property {Ref<Boolean>} $invalid\n * @property {Ref<Boolean>} $error\n * @property {Ref<String>} $path\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} $commit\n */\n\n/**\n * Creates the main Validation Results object for a state tree\n * Walks the tree's top level branches\n * @param {Object<NormalizedValidator>} rules - Rules for the current state tree\n * @param {Object} model - Current state value\n * @param {String} key - Key for the current state tree\n * @param {ResultsStorage} [resultsCache] - A cache map of all the validators\n * @param {String} [path] - the current property path\n * @param {GlobalConfig} [config] - the config object\n * @param {VueInstance} instance\n * @param {ComputedRef<Object>} externalResults\n * @param {Object} siblingState\n * @return {ValidationResult | {}}\n */\n\nfunction _call(body, then, direct) {\n  if (direct) {\n    return then ? then(body()) : body();\n  }\n\n  try {\n    var result = Promise.resolve(body());\n    return then ? result.then(then) : result;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n/**\n * Collects the validation results of all nested state properties\n * @param {Object<NormalizedValidator|Function>} validations - The validation\n * @param {Object} nestedState - Current state\n * @param {String} path - Path to current property\n * @param {ResultsStorage} resultsCache - Validations cache map\n * @param {GlobalConfig} config - The config object\n * @param {VueInstance} instance - The current Vue instance\n * @param {ComputedRef<object>} nestedExternalResults - The external results for this nested collection\n * @return {Object<string, VuelidateState>}\n */\n\n\nfunction _callIgnored(body, direct) {\n  return _call(body, _empty, direct);\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {\n  // collect the property keys\n  const ruleKeys = Object.keys(rules);\n  const cachedResult = resultsCache.get(path, rules);\n  const $dirty = ref(false); // state for the $rewardEarly option\n\n  /** The last invalid state of this property */\n\n  const $lastInvalidState = ref(false);\n  /** The last time $commit was called. Used to re-trigger async calls */\n\n  const $lastCommittedOn = ref(0);\n\n  if (cachedResult) {\n    // if the rules are the same as before, use the cached results\n    if (!cachedResult.$partial) return cachedResult; // remove old watchers\n\n    cachedResult.$unwatch(); // use the `$dirty.value`, so we dont save references by accident\n\n    $dirty.value = cachedResult.$dirty.value;\n  }\n\n  const result = {\n    // restore $dirty from cache\n    $dirty,\n    $path: path,\n    $touch: () => {\n      if (!$dirty.value) $dirty.value = true;\n    },\n    $reset: () => {\n      if ($dirty.value) $dirty.value = false;\n    },\n    $commit: () => {}\n  };\n  /**\n   * If there are no validation rules, it is most likely\n   * a top level state, aka root\n   */\n\n  if (!ruleKeys.length) {\n    // if there are cached results, we should overwrite them with the new ones\n    cachedResult && resultsCache.set(path, rules, result);\n    return result;\n  }\n\n  ruleKeys.forEach(ruleKey => {\n    result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path, siblingState, $lastInvalidState, $lastCommittedOn);\n  });\n  result.$externalResults = computed(() => {\n    if (!externalResults.value) return [];\n    return [].concat(externalResults.value).map((stringError, index) => ({\n      $propertyPath: path,\n      $property: key,\n      $validator: '$externalResults',\n      $uid: `${path}-externalResult-${index}`,\n      $message: stringError,\n      $params: {},\n      $response: null,\n      $pending: false\n    }));\n  });\n  result.$invalid = computed(() => {\n    const r = ruleKeys.some(ruleKey => unref(result[ruleKey].$invalid)); // cache the last invalid state\n\n    $lastInvalidState.value = r;\n    return !!result.$externalResults.value.length || r;\n  });\n  result.$pending = computed(() => ruleKeys.some(ruleKey => unref(result[ruleKey].$pending)));\n  result.$error = computed(() => result.$dirty.value ? result.$pending.value || result.$invalid.value : false);\n  result.$silentErrors = computed(() => ruleKeys.filter(ruleKey => unref(result[ruleKey].$invalid)).map(ruleKey => {\n    const res = result[ruleKey];\n    return reactive({\n      $propertyPath: path,\n      $property: key,\n      $validator: ruleKey,\n      $uid: `${path}-${ruleKey}`,\n      $message: res.$message,\n      $params: res.$params,\n      $response: res.$response,\n      $pending: res.$pending\n    });\n  }).concat(result.$externalResults.value));\n  result.$errors = computed(() => result.$dirty.value ? result.$silentErrors.value : []);\n\n  result.$unwatch = () => ruleKeys.forEach(ruleKey => {\n    result[ruleKey].$unwatch();\n  });\n\n  result.$commit = () => {\n    $lastInvalidState.value = true;\n    $lastCommittedOn.value = Date.now();\n  };\n\n  resultsCache.set(path, rules, result);\n  return result;\n}\n\nfunction collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  const nestedValidationKeys = Object.keys(validations); // if we have no state, return empty object\n\n  if (!nestedValidationKeys.length) return {};\n  return nestedValidationKeys.reduce((results, nestedKey) => {\n    // build validation results for nested state\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache,\n      globalConfig: config,\n      instance,\n      externalResults: nestedExternalResults\n    });\n    return results;\n  }, {});\n}\n/**\n * Generates the Meta fields from the results\n * @param {ValidationResult|{}} results\n * @param {Object.<string, VuelidateState>} nestedResults\n * @param {Object.<string, ValidationResult>} childResults\n * @return {{$anyDirty: Ref<Boolean>, $error: Ref<Boolean>, $invalid: Ref<Boolean>, $errors: Ref<ErrorObject[]>, $dirty: Ref<Boolean>, $touch: Function, $reset: Function }}\n */\n\n\nfunction createMetaFields(results, nestedResults, childResults) {\n  const allResults = computed(() => [nestedResults, childResults].filter(res => res).reduce((allRes, res) => {\n    return allRes.concat(Object.values(unref(res)));\n  }, [])); // returns `$dirty` as true, if all children are dirty\n\n  const $dirty = computed({\n    get() {\n      return results.$dirty.value || (allResults.value.length ? allResults.value.every(r => r.$dirty) : false);\n    },\n\n    set(v) {\n      results.$dirty.value = v;\n    }\n\n  });\n  const $silentErrors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$silentErrors) || []; // collect all nested and child $silentErrors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$silentErrors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$silentErrors);\n    }, []); // merge the $silentErrors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $errors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$errors) || []; // collect all nested and child $errors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$errors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$errors);\n    }, []); // merge the $errors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $invalid = computed(() => // if any of the nested values is invalid\n  allResults.value.some(r => r.$invalid) || // or if the current state is invalid\n  unref(results.$invalid) || // fallback to false if is root\n  false);\n  const $pending = computed(() => // if any of the nested values is pending\n  allResults.value.some(r => unref(r.$pending)) || // if any of the current state validators is pending\n  unref(results.$pending) || // fallback to false if is root\n  false);\n  const $anyDirty = computed(() => allResults.value.some(r => r.$dirty) || allResults.value.some(r => r.$anyDirty) || $dirty.value);\n  const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false);\n\n  const $touch = () => {\n    // call the root $touch\n    results.$touch(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$touch();\n    });\n  };\n\n  const $commit = () => {\n    // call the root $touch\n    results.$commit(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$commit();\n    });\n  };\n\n  const $reset = () => {\n    // reset the root $dirty state\n    results.$reset(); // reset all the children $dirty states\n\n    allResults.value.forEach(result => {\n      result.$reset();\n    });\n  }; // Ensure that if all child and nested results are $dirty, this also becomes $dirty\n\n\n  if (allResults.value.length && allResults.value.every(nr => nr.$dirty)) $touch();\n  return {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  };\n}\n/**\n * @typedef VuelidateState\n * @property {WritableComputedRef<any>} $model\n * @property {ComputedRef<Boolean>} $dirty\n * @property {ComputedRef<Boolean>} $error\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<Boolean>} $invalid\n * @property {ComputedRef<Boolean>} $anyDirty\n * @property {ComputedRef<Boolean>} $pending\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {String} $path\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} [$validate]\n * @property {Function} [$getResultsForChild]\n * @property {Object.<string, VuelidateState>}\n */\n\n/**\n * Main Vuelidate bootstrap function.\n * Used both for Composition API in `setup` and for Global App usage.\n * Used to collect validation state, when walking recursively down the state tree\n * @param {Object} params\n * @param {Object<NormalizedValidator|Function>} params.validations\n * @param {Object} params.state\n * @param {String} [params.key] - Current state property key. Used when being called on nested items\n * @param {String} [params.parentKey] - Parent state property key. Used when being called recursively\n * @param {Object<string, ValidationResult>} [params.childResults] - Used to collect child results.\n * @param {ResultsStorage} params.resultsCache - The cached validation results\n * @param {VueInstance} params.instance - The current Vue instance\n * @param {GlobalConfig} params.globalConfig - The validation config, passed to this setValidations instance.\n * @param {UnwrapNestedRefs<object> | Ref<Object>} params.externalResults - External validation results\n * @return {UnwrapNestedRefs<VuelidateState>}\n */\n\n\nfunction setValidations(_ref) {\n  /**\n   * Executes the validators and returns the result.\n   * @return {Promise<boolean>}\n   */\n  const $validate = _async(function () {\n    $touch();\n    return _invoke(function () {\n      if (mergedConfig.$rewardEarly) {\n        $commit(); // await the watchers\n\n        return _callIgnored(nextTick);\n      }\n    }, function () {\n      // await the watchers\n      return _call(nextTick, function () {\n        return new Promise(resolve => {\n          // return whether it is valid or not\n          if (!$pending.value) return resolve(!$invalid.value);\n          const unwatch = watch($pending, () => {\n            resolve(!$invalid.value);\n            unwatch();\n          });\n        });\n      });\n    });\n  });\n  /**\n   * Returns a child component's results, based on registration name\n   * @param {string} key\n   * @return {VuelidateState}\n   */\n\n\n  let {\n    validations,\n    state,\n    key,\n    parentKey,\n    childResults,\n    resultsCache,\n    globalConfig = {},\n    instance,\n    externalResults\n  } = _ref;\n  const path = parentKey ? `${parentKey}.${key}` : key; // Sort out the validation object into:\n  // â€“ rules = validators for current state tree fragment\n  // â€” nestedValidators = nested state fragments keys that might contain more validators\n  // â€“ config = configuration properties that affect this state fragment\n\n  const {\n    rules,\n    nestedValidators,\n    config\n  } = sortValidations(validations);\n  const mergedConfig = Object.assign({}, globalConfig, config); // create protected state for cases when the state branch does not exist yet.\n  // This protects when using the OptionsAPI as the data is bound after the setup method\n\n  const nestedState = key ? computed(() => {\n    const s = unref(state);\n    return s ? unref(s[key]) : undefined;\n  }) : state; // cache the external results, so we can revert back to them\n\n  const cachedExternalResults = Object.assign({}, unref(externalResults) || {});\n  const nestedExternalResults = computed(() => {\n    const results = unref(externalResults);\n    if (!key) return results;\n    return results ? unref(results[key]) : undefined;\n  }); // Use rules for the current state fragment and validate it\n\n  const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state); // Use nested keys to repeat the process\n  // *WARN*: This is recursive\n\n  const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults); // Collect and merge this level validation results\n  // with all nested validation results\n\n  const {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  } = createMetaFields(results, nestedResults, childResults);\n  /**\n   * If we have no `key`, this is the top level state\n   * We dont need `$model` there.\n   */\n\n  const $model = key ? computed({\n    get: () => unref(nestedState),\n    set: val => {\n      $dirty.value = true;\n      const s = unref(state);\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n\n      if (isRef(s[key])) {\n        s[key].value = val;\n      } else {\n        s[key] = val;\n      }\n    }\n  }) : null;\n\n  if (key && mergedConfig.$autoDirty) {\n    watch(nestedState, () => {\n      if (!$dirty.value) $touch();\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n    }, {\n      flush: 'sync'\n    });\n  }\n\n  function $getResultsForChild(key) {\n    return (childResults.value || {})[key];\n  }\n\n  function $clearExternalResults() {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults;\n    } else {\n      // if the external results state was empty, we need to delete every property, one by one\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach(k => {\n          delete externalResults[k];\n        });\n      } else {\n        // state was not empty, so we just assign it back into the current state\n        Object.assign(externalResults, cachedExternalResults);\n      }\n    }\n  }\n\n  return reactive(Object.assign({}, results, {\n    // NOTE: The order here is very important, since we want to override\n    // some of the *results* meta fields with the collective version of it\n    // that includes the results of nested state validation results\n    $model,\n    $dirty,\n    $error,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $pending,\n    $touch,\n    $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors,\n    $validate,\n    $commit\n  }, childResults && {\n    $getResultsForChild,\n    $clearExternalResults\n  }, nestedResults));\n}\n\nclass ResultsStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n  /**\n   * Stores a validation result, and its rules by its path\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {ValidationResult} result\n   */\n\n\n  set(path, rules, result) {\n    this.storage.set(path, {\n      rules,\n      result\n    });\n  }\n  /**\n   * Check if the stored `results` for the provided `path` have the same `rules` compared to 'storedRules'\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {Object<NormalizedValidator>} storedRules\n   * @return {Boolean}\n   */\n\n\n  checkRulesValidity(path, rules, storedRules) {\n    const storedRulesKeys = Object.keys(storedRules);\n    const newRulesKeys = Object.keys(rules);\n    if (newRulesKeys.length !== storedRulesKeys.length) return false;\n    const hasAllValidators = newRulesKeys.every(ruleKey => storedRulesKeys.includes(ruleKey));\n    if (!hasAllValidators) return false;\n    return newRulesKeys.every(ruleKey => {\n      if (!rules[ruleKey].$params) return true;\n      return Object.keys(rules[ruleKey].$params).every(paramKey => {\n        // make sure to unwrap before comparing\n        return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);\n      });\n    });\n  }\n  /**\n   * Returns the matched result if catche is valid\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @return {{$partial: boolean, $dirty: Ref<Boolean>, $unwatch: function}|undefined|ValidationResult}\n   */\n\n\n  get(path, rules) {\n    const storedRuleResultPair = this.storage.get(path);\n    if (!storedRuleResultPair) return undefined;\n    const {\n      rules: storedRules,\n      result\n    } = storedRuleResultPair;\n    const isValidCache = this.checkRulesValidity(path, rules, storedRules);\n    const $unwatch = result.$unwatch ? result.$unwatch : () => ({});\n    if (!isValidCache) return {\n      $dirty: result.$dirty,\n      $partial: true,\n      $unwatch\n    };\n    return result;\n  }\n\n}\n\nconst CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n};\nconst VuelidateInjectChildResults = Symbol('vuelidate#injectChildResults');\nconst VuelidateRemoveChildResults = Symbol('vuelidate#removeChildResults');\n/**\n * Create helpers to collect validation state from child components\n * @param {Object} params\n * @param {String | Number | Boolean} params.$scope - Parent component scope\n * @return {{sendValidationResultsToParent: function[], childResults: ComputedRef<Object>, removeValidationResultsFromParent: function[]}}\n */\n\nfunction nestedValidations(_ref) {\n  let {\n    $scope,\n    instance\n  } = _ref;\n  const childResultsRaw = {};\n  const childResultsKeys = ref([]);\n  const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {\n    results[key] = unref(childResultsRaw[key]);\n    return results;\n  }, {}));\n  /**\n   * Allows children to send validation data up to their parent.\n   * @param {Object} results - the results\n   * @param {Object} args\n   * @param {String} args.$registerAs - the $registeredAs key\n   * @param {String | Number | Boolean} args.$scope - the $scope key\n   */\n\n  function injectChildResultsIntoParent(results, _ref2) {\n    let {\n      $registerAs: key,\n      $scope: childScope,\n      $stopPropagation\n    } = _ref2;\n    if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope) return;\n    childResultsRaw[key] = results;\n    childResultsKeys.value.push(key);\n  } // combine with other `injectChildResultsIntoParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent);\n  /**\n   * Allows children to remove the validation data from their parent, before getting destroyed.\n   * @param {String} key - the registeredAs key\n   */\n\n  function removeChildResultsFromParent(key) {\n    // remove the key\n    childResultsKeys.value = childResultsKeys.value.filter(childKey => childKey !== key); // remove the stored data for the key\n\n    delete childResultsRaw[key];\n  } // combine with other `removeChildResultsFromParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent); // inject the `injectChildResultsIntoParent` method, into the current scope\n\n  const sendValidationResultsToParent = inject(VuelidateInjectChildResults, []); // provide to all of its children the send results to parent function\n\n  provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances);\n  const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, []); // provide to all of its children the remove results  function\n\n  provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances);\n  return {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  };\n}\n\n/**\n * Helper proxy for instance property access. It makes every reference\n * reactive for the validation function\n * @param target\n * @return {*|ComputedRef<*>}\n */\n\nfunction ComputedProxyFactory(target) {\n  return new Proxy(target, {\n    get(target, prop) {\n      return typeof target[prop] === 'object' ? ComputedProxyFactory(target[prop]) : computed(() => target[prop]);\n    }\n\n  });\n}\n\n/**\n * @typedef GlobalConfig\n * @property {String} [$registerAs] - Config Object\n * @property {String | Number | Symbol} [$scope] - A scope to limit child component registration\n * @property {Boolean} [$stopPropagation] - Tells a Vue component to stop sending its results up to the parent\n * @property {Ref<Object>} [$externalResults] - External error messages, like from server validation.\n * @property {Boolean} [$autoDirty] - Should the form watch for state changed, and automatically set `$dirty` to true.\n * @property {Boolean} [$lazy] - Should the validations be lazy, and run only after they are dirty\n * @property {Boolean} [$rewardEarly] - Once valid, re-runs property validators only on manual calls of $commit\n */\n\n/**\n * Composition API compatible Vuelidate\n * Use inside the `setup` lifecycle hook\n * @param {Object | GlobalConfig} [validations] - Validations Object or the globalConfig.\n * @param {Object} [state] - State object - required if `validations` is a validation object.\n * @param {GlobalConfig} [globalConfig] - Config Object\n * @return {ComputedRef<*>}\n */\n\nfunction useVuelidate(validations, state) {\n  let globalConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // if we pass only one argument, its most probably the globalConfig.\n  // This use case is so parents can just collect results of child forms.\n  if (arguments.length === 1) {\n    globalConfig = validations;\n    validations = undefined;\n    state = undefined;\n  }\n\n  let {\n    $registerAs,\n    $scope = CollectFlag.COLLECT_ALL,\n    $stopPropagation,\n    $externalResults,\n    currentVueInstance\n  } = globalConfig;\n  const instance = currentVueInstance || getCurrentInstance();\n  const componentOptions = instance ? instance.proxy.$options : {}; // if there is no registration name, add one.\n\n  if (!$registerAs && instance) {\n    // NOTE:\n    // ._uid // Vue 2.x Composition-API plugin\n    // .uid // Vue 3.0\n    const uid = instance.uid || instance._uid;\n    $registerAs = `_vuelidate_${uid}`;\n  }\n\n  const validationResults = ref({});\n  const resultsCache = new ResultsStorage();\n  const {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  } = instance ? nestedValidations({\n    $scope,\n    instance\n  }) : {\n    childResults: ref({})\n  }; // Options API\n\n  if (!validations && componentOptions.validations) {\n    const rules = componentOptions.validations;\n    state = ref({});\n    onBeforeMount(() => {\n      // Delay binding state to validations defined with the Options API until mounting, when the data\n      // has been attached to the component instance. From that point on it will be reactive.\n      state.value = instance.proxy;\n      watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules, validations => {\n        validationResults.value = setValidations({\n          validations,\n          state,\n          childResults,\n          resultsCache,\n          globalConfig,\n          instance: instance.proxy,\n          externalResults: $externalResults || instance.proxy.vuelidateExternalResults\n        });\n      }, {\n        immediate: true\n      });\n    });\n    globalConfig = componentOptions.validationsConfig || globalConfig;\n  } else {\n    const validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations // wrap plain objects in a reactive, so we can track changes if they have computed in them.\n    : reactive(validations || {});\n    watch(validationsWatchTarget, newValidationRules => {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state,\n        childResults,\n        resultsCache,\n        globalConfig,\n        instance: instance ? instance.proxy : {},\n        externalResults: $externalResults\n      });\n    }, {\n      immediate: true\n    });\n  }\n\n  if (instance) {\n    // send all the data to the parent when the function is invoked inside setup.\n    sendValidationResultsToParent.forEach(f => f(validationResults, {\n      $registerAs,\n      $scope,\n      $stopPropagation\n    })); // before this component is destroyed, remove all the data from the parent.\n\n    onBeforeUnmount(() => removeValidationResultsFromParent.forEach(f => f($registerAs)));\n  }\n\n  return computed(() => {\n    return Object.assign({}, unref(validationResults.value), childResults.value);\n  });\n}\n\nexport { CollectFlag, useVuelidate as default, useVuelidate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}