{"ast":null,"code":"import axios from \"axios\";\nimport store from './store';\nconst API = axios.create({\n  withCredentials: true,\n  baseURL: 'http://127.0.0.1:8000/api/v1'\n  // headers: {\n  //     'Access-Control-Allow-Origin': '*',\n  //     'Access-Control-Allow-Headers': '*',\n  //     'Access-Control-Allow-Credentials': 'true',\n  // }\n});\n// let token = document.getElementsByName(\"csrfmiddlewaretoken\")\n\n// if (token) {\n//     API.defaults.headers.common['X-CSRFToken'] = token[0].value\n// }\n// else {\n//     console.error('CSRF token not found')\n// }\n\nAPI.interceptors.response.use(response => response, async err => {\n  console.log(err);\n  if (err.response.status == 401 && err.config.url != '/token/') {\n    store.dispatch('tokenRefresh', store.state.refreshToken).then(() => {\n      let old_request = err.config;\n      const new_access = store.state.accessToken;\n      console.log(new_access);\n      console.log(old_request.headers.Authorization);\n      old_request.headers.Authorization = `Bearer ${new_access}`;\n      console.log(old_request.headers.Authorization);\n      return API(old_request);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  return Promise.reject(err);\n});\nexport { API };","map":{"version":3,"names":["axios","store","API","create","withCredentials","baseURL","interceptors","response","use","err","console","log","status","config","url","dispatch","state","refreshToken","then","old_request","new_access","accessToken","headers","Authorization","catch","Promise","reject"],"sources":["/Users/elinaigdavletova/Documents/Интернет_программирование/GQW/frontend/vueapp/src/axios-api.js"],"sourcesContent":["import axios from \"axios\";\nimport store from './store';\n\nconst API = axios.create({\n    withCredentials: true,\n    baseURL: 'http://127.0.0.1:8000/api/v1',\n    // headers: {\n    //     'Access-Control-Allow-Origin': '*',\n    //     'Access-Control-Allow-Headers': '*',\n    //     'Access-Control-Allow-Credentials': 'true',\n    // }\n})\n// let token = document.getElementsByName(\"csrfmiddlewaretoken\")\n\n// if (token) {\n//     API.defaults.headers.common['X-CSRFToken'] = token[0].value\n// }\n// else {\n//     console.error('CSRF token not found')\n// }\n\nAPI.interceptors.response.use(response => response, async err => {\n    console.log(err)\n    if (err.response.status == 401 && err.config.url != '/token/') {\n        store.dispatch('tokenRefresh', store.state.refreshToken\n        ).then(() => {\n            let old_request = err.config\n            const new_access = store.state.accessToken\n            console.log(new_access)\n            console.log(old_request.headers.Authorization)\n            old_request.headers.Authorization = `Bearer ${new_access}`\n            console.log(old_request.headers.Authorization)\n            return API(old_request)\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n    return Promise.reject(err)\n})\n\nexport { API }"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,SAAS;AAE3B,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;EACT;EACA;EACA;EACA;EACA;AACJ,CAAC,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAH,GAAG,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAACD,QAAQ,IAAIA,QAAQ,EAAE,MAAME,GAAG,IAAI;EAC7DC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAChB,IAAIA,GAAG,CAACF,QAAQ,CAACK,MAAM,IAAI,GAAG,IAAIH,GAAG,CAACI,MAAM,CAACC,GAAG,IAAI,SAAS,EAAE;IAC3Db,KAAK,CAACc,QAAQ,CAAC,cAAc,EAAEd,KAAK,CAACe,KAAK,CAACC,YAAY,CACtD,CAACC,IAAI,CAAC,MAAM;MACT,IAAIC,WAAW,GAAGV,GAAG,CAACI,MAAM;MAC5B,MAAMO,UAAU,GAAGnB,KAAK,CAACe,KAAK,CAACK,WAAW;MAC1CX,OAAO,CAACC,GAAG,CAACS,UAAU,CAAC;MACvBV,OAAO,CAACC,GAAG,CAACQ,WAAW,CAACG,OAAO,CAACC,aAAa,CAAC;MAC9CJ,WAAW,CAACG,OAAO,CAACC,aAAa,GAAI,UAASH,UAAW,EAAC;MAC1DV,OAAO,CAACC,GAAG,CAACQ,WAAW,CAACG,OAAO,CAACC,aAAa,CAAC;MAC9C,OAAOrB,GAAG,CAACiB,WAAW,CAAC;IAC3B,CAAC,CAAC,CAACK,KAAK,CAACf,GAAG,IAAI;MACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IACpB,CAAC,CAAC;EACN;EACA,OAAOgB,OAAO,CAACC,MAAM,CAACjB,GAAG,CAAC;AAC9B,CAAC,CAAC;AAEF,SAASP,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}