{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { API } from '../axios-api';\nimport { mapState } from 'vuex';\nimport Navbar from '../components/Navbar.vue';\nexport default {\n  name: 'MyDecks',\n  components: {\n    Navbar\n  },\n  data() {\n    return {\n      profile: '',\n      decks: [],\n      cards: []\n    };\n  },\n  computed: {\n    ...mapState(['accessToken', 'user'])\n    // closest_date(id) {\n    //     let closest = new Date('2023-02-31');\n    //     console.log('this cards', id)\n    //     let cards = this.cards\n    //     cards.forEach(card => {\n    //         console.log('card ?', card)\n    //         if (card.original_card.deck == id) {\n    //             if (!isNaN(closest)) {\n    //                 let next = new Date(card.next_review)\n    //                 if (next.getTime() < closest.getTime()) {\n    //                     closest = next\n    //                 }\n    //             }\n    //             else {\n    //                 closest = Date(card.next_review)\n    //             }\n    //         }\n    //     })\n    //     return closest\n    // },\n    // cards_to_review: function(id) {\n    //     let today = new Date()\n    //     let k = 0\n    //     for (let card in this.cards) {\n    //         if (card.original_card.deck == id) {\n    //             let next = new Date(card.next_review)\n    //             if (next.getTime() < today.getTime()) {\n    //                 k++\n    //             }\n    //         }\n    //     }\n    //     return k\n    // }\n  },\n\n  created() {\n    API.get('/cards/profiles').then(response => {\n      console.log(response.data);\n      let profiles = response.data;\n      profiles.forEach(p => {\n        if (p.user.id == this.user.id) {\n          this.profile = p;\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n    API.get('/cards/decks').then(response => {\n      console.log(response.data);\n      let decks = response.data;\n      decks.forEach(d => {\n        if (this.profile.decks.includes(d.id)) {\n          this.decks.push(d);\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n    API.get('/cards/cards').then(response => {\n      console.log(response.data);\n      let all_cards = response.data;\n      all_cards.forEach(c => {\n        if (this.profile.user.id == c.user) {\n          this.cards.push(c);\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  },\n  methods: {\n    closest_date(id) {\n      var closest = new Date('NaN');\n      console.log('this cards', closest);\n      let cards = this.cards;\n      for (let card in this.cards) {\n        if (card.original_card.deck == id) {\n          console.log(card);\n          console.log('is', isNaN(closest));\n          if (!isNaN(closest)) {\n            console.log('not nan');\n            let next = new Date(card.next_review);\n            if (next.getTime() < closest.getTime()) {\n              closest = next;\n            }\n          } else {\n            console.log('nan');\n            closest = new Date(card.next_review);\n            console.log('close', closest);\n          }\n        }\n      }\n      // cards.forEach(card => {\n      //     if (card.original_card.deck == id) {\n      //         console.log(card)\n      //         console.log('is', isNaN(closest))\n      //         if (!isNaN(closest)) {\n      //             console.log('not nan')\n      //             let next = new Date(card.next_review)\n      //             if (next.getTime() < closest.getTime()) {\n      //                 closest = next\n      //             }\n      //         }\n      //         else {\n      //             console.log('nan')\n      //             closest = new Date(card.next_review)\n      //             console.log('close', closest)\n      //         }\n      //     }\n      // })\n      return closest;\n    },\n    cards_to_review(id) {\n      let today = new Date();\n      let k = 0;\n      for (let card in this.cards) {\n        if (card.original_card.deck == id) {\n          let next = new Date(card.next_review);\n          if (next.getTime() < today.getTime()) {\n            k++;\n          }\n        }\n      }\n      return k;\n    }\n  }\n};","map":{"version":3,"names":["API","mapState","Navbar","name","components","data","profile","decks","cards","computed","created","get","then","response","console","log","profiles","forEach","p","user","id","catch","err","d","includes","push","all_cards","c","methods","closest_date","closest","Date","card","original_card","deck","isNaN","next","next_review","getTime","cards_to_review","today","k"],"sources":["/Users/elinaigdavletova/Documents/Интернет_программирование/GQW/frontend/vueapp/src/card_views/MyDecks.vue"],"sourcesContent":["<template>\n    <Navbar></Navbar>\n    <div class=\"container\">\n        <h1 class=\"my-3\"> Мои стопки </h1>\n        <router-link :to=\"{ name: 'create-deck' }\" class=\"btn btn-outline-secondary btn-sm\">Создать стопку</router-link>\n        <div class=\"d-flex flex-wrap\">\n            <div class=\"card m-2 col-5\" v-for=\"deck in decks\" :key=\"deck.id\">\n                <div class=\"card-body\">\n                    <div class=\"d-flex justify-content-between\">\n                        <div>\n                            <h5 class=\"card-title\"><router-link :to=\"{ name: 'deck', params: { slug: deck.slug } }\"\n                                    class=\"text-reset text-decoration-none\">{{ deck.title }}</router-link></h5>\n                            <h6 class=\"card-subtitle mb-2 text-muted\">{{ deck.creator.username }}, {{ deck.creation_date }}\n                            </h6>\n                            <p class=\"card-text\">{{ deck.desc }}</p>\n                        </div>\n                        <div class=\"col-5 d-flex flex-column justify-content-around\">\n                            <router-link :to=\"{ name: 'review', params: { slug: deck.slug } }\" class=\"btn btn-primary\">Учить<span class=\"badge bg-secondary\">{{ cards_to_review(deck.id) }}</span></router-link>\n                            <router-link :to=\"{ name: 'create-card', params: { slug: deck.slug } }\" v-if=\"accessToken != null && user.id == deck.creator\" class=\"btn btn-outline-secondary btn-sm\">Создать карточку</router-link>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <small class=\"text-muted\">{{ closest_date(deck.id) }}</small>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"text-center\">\n\n            <!-- {% if page_obj.has_previous %}\n                <a href=\"?page={{ page_obj.previous_page_number }}\">пред.</a>\n            {% endif %}\n\n            <p class=\"mt-2\">\n                {{ page_obj.number }} из {{ page_obj.paginator.num_pages }}\n            </p>\n\n            {% if page_obj.has_next %}\n                <a href=\"?page={{ page_obj.next_page_number }}\">след.</a>\n            {% endif %} -->\n        </div>\n    </div>\n</template>\n\n<script>\nimport { API } from '../axios-api'\nimport { mapState } from 'vuex'\nimport Navbar from '../components/Navbar.vue'\nexport default {\n    name: 'MyDecks',\n    components: {\n        Navbar\n    },\n    data() {\n        return {\n            profile: '',\n            decks: [],\n            cards: [],\n        }\n    },\n    computed: {\n        ...mapState(['accessToken', 'user']),\n        // closest_date(id) {\n        //     let closest = new Date('2023-02-31');\n        //     console.log('this cards', id)\n        //     let cards = this.cards\n        //     cards.forEach(card => {\n        //         console.log('card ?', card)\n        //         if (card.original_card.deck == id) {\n        //             if (!isNaN(closest)) {\n        //                 let next = new Date(card.next_review)\n        //                 if (next.getTime() < closest.getTime()) {\n        //                     closest = next\n        //                 }\n        //             }\n        //             else {\n        //                 closest = Date(card.next_review)\n        //             }\n        //         }\n        //     })\n        //     return closest\n        // },\n        // cards_to_review: function(id) {\n        //     let today = new Date()\n        //     let k = 0\n        //     for (let card in this.cards) {\n        //         if (card.original_card.deck == id) {\n        //             let next = new Date(card.next_review)\n        //             if (next.getTime() < today.getTime()) {\n        //                 k++\n        //             }\n        //         }\n        //     }\n        //     return k\n        // }\n    },\n    created() {\n        API.get('/cards/profiles').then(response => {\n            console.log(response.data)\n            let profiles = response.data\n            profiles.forEach(p => {\n                if (p.user.id == this.user.id) {\n                    this.profile = p\n                }\n            })\n        }).catch(err => {\n            console.log(err)\n        })\n        API.get('/cards/decks').then(response => {\n            console.log(response.data)\n            let decks = response.data\n            decks.forEach(d => {\n                if (this.profile.decks.includes(d.id)) {\n                    this.decks.push(d)\n                }\n            })\n        }).catch(err => {\n            console.log(err)\n        })\n        API.get('/cards/cards').then(response => {\n            console.log(response.data)\n            let all_cards = response.data\n            all_cards.forEach(c => {\n                if (this.profile.user.id == c.user) {\n                    this.cards.push(c)\n                }\n            })\n        }).catch(err => {\n            console.log(err)\n        })\n    },\n    methods: {\n        closest_date(id) {\n            var closest = new Date('NaN');\n            console.log('this cards', closest)\n            let cards = this.cards\n            for (let card in this.cards) {\n                if (card.original_card.deck == id) {\n                    console.log(card)\n                    console.log('is', isNaN(closest))\n                    if (!isNaN(closest)) {\n                        console.log('not nan')\n                        let next = new Date(card.next_review)\n                        if (next.getTime() < closest.getTime()) {\n                            closest = next\n                        }\n                    }\n                    else {\n                        console.log('nan')\n                        closest = new Date(card.next_review)\n                        console.log('close', closest)\n                    }\n                }\n            }\n            // cards.forEach(card => {\n            //     if (card.original_card.deck == id) {\n            //         console.log(card)\n            //         console.log('is', isNaN(closest))\n            //         if (!isNaN(closest)) {\n            //             console.log('not nan')\n            //             let next = new Date(card.next_review)\n            //             if (next.getTime() < closest.getTime()) {\n            //                 closest = next\n            //             }\n            //         }\n            //         else {\n            //             console.log('nan')\n            //             closest = new Date(card.next_review)\n            //             console.log('close', closest)\n            //         }\n            //     }\n            // })\n            return closest\n        },\n        cards_to_review(id) {\n            let today = new Date()\n            let k = 0\n            for (let card in this.cards) {\n                if (card.original_card.deck == id) {\n                    let next = new Date(card.next_review)\n                    if (next.getTime() < today.getTime()) {\n                        k++\n                    }\n                }\n            }\n            return k\n        }\n    }\n}\n</script>\n\n<style scoped></style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}