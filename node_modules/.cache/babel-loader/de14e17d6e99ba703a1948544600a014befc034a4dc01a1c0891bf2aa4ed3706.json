{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { API } from '../axios-api';\nimport Navbar from '../components/Navbar.vue';\n// import { useVuelidate } from '@vuelidate/core'\n// import { required, email, minLength, sameAs } from '@vuelidate/validators'\n\nexport default {\n  name: 'Register',\n  // props: [\n  //     surname\n  // ],\n  // setup() {\n  //     return {\n  //         v$: useVuelidate() \n  //     }\n  // },\n  data() {\n    return {\n      last_name: \"\",\n      first_name: \"\",\n      username: \"\",\n      email: \"\",\n      password1: \"\",\n      password2: \"\"\n    };\n  },\n  // validations() {\n  //     return {\n  //         new_user: {\n  //             last_name: { required },\n  //             first_name: { required },\n  //             username: { required },\n  //             email: { required, email },\n  //             password1: { required, minLength: minLength(4) },\n  //             password2: { required, sameAsPassword: sameAs('password1')}\n  //         }\n  //     }\n  // },\n  components: {\n    Navbar\n  },\n  created() {\n    // API.post('auth/register/', {\n    //     \"data\": {\n    //         last_name: this.last_name,\n    //         first_name: this.first_name,\n    //         username: this.username,\n    //         email: this.email,\n    //         password: this.password1,\n    //     }\n    //     // last_name: this.last_name,\n    //     // first_name: this.first_name,\n    //     // username: this.username,\n    //     // email: this.email,\n    //     // password: this.password1,\n    // })\n    //     .then(response => {\n    //         console.log('Post API has received data')\n    //         console.log(response.data)\n    //     })\n    //     .catch(err => {\n    //         console.log(err.response)\n    //     })\n  },\n  methods: {\n    reg() {\n      console.log('done');\n      API.post('/auth/register/', {\n        last_name: this.last_name,\n        first_name: this.first_name,\n        username: this.username,\n        email: this.email,\n        password: this.password1\n      }\n\n      // \"data\": {\n      //     last_name: this.last_name,\n      //     first_name: this.first_name,\n      //     username: this.username,\n      //     email: this.email,\n      //     password: this.password1,\n      // }\n      // 'data': {\n      // 'last_name': 'last_name',\n      // 'first_name': 'first_name',\n      // 'username': 'username',\n      // 'email': 'email',\n      // 'password': 'password1',}\n      ).then(response => {\n        console.log('Post API has received data');\n        console.log(response.data);\n        this.last_name = \"\";\n        this.first_name = \"\";\n        this.username = \"\";\n        this.email = \"\";\n        this.password1 = \"\";\n        this.password2 = \"\";\n        this.$router.push({\n          name: 'login'\n        });\n      }).catch(err => {\n        console.log(err.response);\n      });\n      console.log('yes');\n    }\n    // Example starter JavaScript for disabling form submissions if there are invalid fields\n    // function () {\n    //     'use strict'\n\n    //     // Fetch all the forms we want to apply custom Bootstrap validation styles to\n    //     var forms = document.querySelectorAll('.needs-validation')\n\n    //     // Loop over them and prevent submission\n    //     Array.prototype.slice.call(forms)\n    //         .forEach(function (form) {\n    //             form.addEventListener('submit', function (event) {\n    //                 if (!form.checkValidity()) {\n    //                     event.preventDefault()\n    //                     event.stopPropagation()\n    //                 }\n\n    //                 form.classList.add('was-validated')\n    //             }, false)\n    //         })\n    // }\n  }\n};","map":{"version":3,"names":["API","Navbar","name","data","last_name","first_name","username","email","password1","password2","components","created","methods","reg","console","log","post","password","then","response","$router","push","catch","err"],"sources":["/Users/elinaigdavletova/Documents/Интернет_программирование/GQW/frontend/vueapp/src/views/Register.vue"],"sourcesContent":["<template>\n    <Navbar></Navbar>\n    <form class=\"w-50 mx-auto my-5 row needs-validation\" @submit.prevent=\"reg()\">\n        <div class=\"mb-3 col-6\">\n            <label for=\"InputSurname\" class=\"form-label\">Фамилия</label>\n            <input type=\"text\" class=\"form-control\" id=\"InputSurname\" v-model=\"last_name\">\n            <div class=\"invalid-feedback\">\n                Введите свою фамилию\n            </div>\n        </div>\n        <div class=\"mb-3 col-6\">\n            <label for=\"InputName\" class=\"form-label\">Имя</label>\n            <input type=\"text\" class=\"form-control\" id=\"InputName\" v-model=\"first_name\">\n            <div class=\"invalid-feedback\">\n                Введите свое имя\n            </div>\n        </div>\n        <div class=\"mb-3 col-6\">\n            <label for=\"InputUsername\" class=\"form-label\">Логин</label>\n            <input type=\"text\" class=\"form-control\" id=\"InputUsername\" v-model=\"username\">\n            <div class=\"invalid-feedback\">\n                Введите свой логин\n            </div>\n        </div>\n        <div class=\"mb-3 col-6\">\n            <label for=\"InputEmail\" class=\"form-label\">Email</label>\n            <input type=\"email\" class=\"form-control\" id=\"InputEmail\" v-model=\"email\">\n            <div class=\"invalid-feedback\">\n                Введите действительный e-mail\n            </div>\n        </div>\n        <div class=\"mb-3 col-6\">\n            <label for=\"InputPassword1\" class=\"form-label\">Пароль</label>\n            <input type=\"password\" class=\"form-control\" id=\"InputPassword1\" v-model=\"password1\">\n        </div>\n        <div class=\"mb-3 col-6\">\n            <label for=\"InputPassword2\" class=\"form-label\">Повторите пароль</label>\n            <input type=\"password\" class=\"form-control\" id=\"InputPassword2\" v-model=\"password2\">\n            <div class=\"invalid-feedback\">\n                Пароли должны совпадать\n            </div>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary w-75 mx-auto\">Зарегистрироваться</button>\n    </form>\n</template>\n\n<script>\nimport { API } from '../axios-api'\nimport Navbar from '../components/Navbar.vue'\n// import { useVuelidate } from '@vuelidate/core'\n// import { required, email, minLength, sameAs } from '@vuelidate/validators'\n\nexport default {\n    name: 'Register',\n    // props: [\n    //     surname\n    // ],\n    // setup() {\n    //     return {\n    //         v$: useVuelidate() \n    //     }\n    // },\n    data() {\n        return {\n            last_name: \"\",\n            first_name: \"\",\n            username: \"\",\n            email: \"\",\n            password1: \"\",\n            password2: \"\",\n        }\n    },\n    // validations() {\n    //     return {\n    //         new_user: {\n    //             last_name: { required },\n    //             first_name: { required },\n    //             username: { required },\n    //             email: { required, email },\n    //             password1: { required, minLength: minLength(4) },\n    //             password2: { required, sameAsPassword: sameAs('password1')}\n    //         }\n    //     }\n    // },\n    components: {\n        Navbar,\n    },\n    created() {\n        // API.post('auth/register/', {\n        //     \"data\": {\n        //         last_name: this.last_name,\n        //         first_name: this.first_name,\n        //         username: this.username,\n        //         email: this.email,\n        //         password: this.password1,\n        //     }\n        //     // last_name: this.last_name,\n        //     // first_name: this.first_name,\n        //     // username: this.username,\n        //     // email: this.email,\n        //     // password: this.password1,\n        // })\n        //     .then(response => {\n        //         console.log('Post API has received data')\n        //         console.log(response.data)\n        //     })\n        //     .catch(err => {\n        //         console.log(err.response)\n        //     })\n    },\n    methods: {\n        reg() {\n            console.log('done');\n            API.post('/auth/register/', {last_name: this.last_name, first_name: this.first_name, username: this.username, email: this.email, password: this.password1}\n\n                // \"data\": {\n                //     last_name: this.last_name,\n                //     first_name: this.first_name,\n                //     username: this.username,\n                //     email: this.email,\n                //     password: this.password1,\n                // }\n                // 'data': {\n                // 'last_name': 'last_name',\n                // 'first_name': 'first_name',\n                // 'username': 'username',\n                // 'email': 'email',\n                // 'password': 'password1',}\n            )\n                .then(response => {\n                    console.log('Post API has received data')\n                    console.log(response.data)\n                    this.last_name = \"\";\n                    this.first_name = \"\";\n                    this.username = \"\";\n                    this.email = \"\";\n                    this.password1 = \"\";\n                    this.password2 = \"\";\n                    this.$router.push({ name: 'login' })\n                })\n                .catch(err => {\n                    console.log(err.response)\n                })\n            console.log('yes')\n        },\n        // Example starter JavaScript for disabling form submissions if there are invalid fields\n        // function () {\n        //     'use strict'\n\n        //     // Fetch all the forms we want to apply custom Bootstrap validation styles to\n        //     var forms = document.querySelectorAll('.needs-validation')\n\n        //     // Loop over them and prevent submission\n        //     Array.prototype.slice.call(forms)\n        //         .forEach(function (form) {\n        //             form.addEventListener('submit', function (event) {\n        //                 if (!form.checkValidity()) {\n        //                     event.preventDefault()\n        //                     event.stopPropagation()\n        //                 }\n\n        //                 form.classList.add('was-validated')\n        //             }, false)\n        //         })\n        // }\n    }\n}\n</script>\n\n<style scoped></style>"],"mappings":";AA+CA,SAASA,GAAE,QAAS,cAAa;AACjC,OAAOC,MAAK,MAAO,0BAAyB;AAC5C;AACA;;AAEA,eAAe;EACXC,IAAI,EAAE,UAAU;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,SAAS,EAAE,EAAE;MACbC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,SAAS,EAAE,EAAE;MACbC,SAAS,EAAE;IACf;EACJ,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,UAAU,EAAE;IACRT;EACJ,CAAC;EACDU,OAAOA,CAAA,EAAG;IACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACH;EACDC,OAAO,EAAE;IACLC,GAAGA,CAAA,EAAG;MACFC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnBf,GAAG,CAACgB,IAAI,CAAC,iBAAiB,EAAE;QAACZ,SAAS,EAAE,IAAI,CAACA,SAAS;QAAEC,UAAU,EAAE,IAAI,CAACA,UAAU;QAAEC,QAAQ,EAAE,IAAI,CAACA,QAAQ;QAAEC,KAAK,EAAE,IAAI,CAACA,KAAK;QAAEU,QAAQ,EAAE,IAAI,CAACT;MAAS;;MAErJ;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAAA,CACJ,CACKU,IAAI,CAACC,QAAO,IAAK;QACdL,OAAO,CAACC,GAAG,CAAC,4BAA4B;QACxCD,OAAO,CAACC,GAAG,CAACI,QAAQ,CAAChB,IAAI;QACzB,IAAI,CAACC,SAAQ,GAAI,EAAE;QACnB,IAAI,CAACC,UAAS,GAAI,EAAE;QACpB,IAAI,CAACC,QAAO,GAAI,EAAE;QAClB,IAAI,CAACC,KAAI,GAAI,EAAE;QACf,IAAI,CAACC,SAAQ,GAAI,EAAE;QACnB,IAAI,CAACC,SAAQ,GAAI,EAAE;QACnB,IAAI,CAACW,OAAO,CAACC,IAAI,CAAC;UAAEnB,IAAI,EAAE;QAAQ,CAAC;MACvC,CAAC,EACAoB,KAAK,CAACC,GAAE,IAAK;QACVT,OAAO,CAACC,GAAG,CAACQ,GAAG,CAACJ,QAAQ;MAC5B,CAAC;MACLL,OAAO,CAACC,GAAG,CAAC,KAAK;IACrB;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}