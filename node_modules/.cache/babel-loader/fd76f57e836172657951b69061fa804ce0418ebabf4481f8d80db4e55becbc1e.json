{"ast":null,"code":"import axios from \"axios\";\nconst API = axios.create({\n  withCredentials: true,\n  baseURL: 'http://127.0.0.1:8000/api/v1'\n  // headers: {\n  //     'Access-Control-Allow-Origin': '*',\n  //     'Access-Control-Allow-Headers': '*',\n  //     'Access-Control-Allow-Credentials': 'true',\n  // }\n});\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  API.get('/get-token/').then(response => {\n    console.log(response.data);\n    localStorage.setItem('csrfToken', response.data.token);\n    // API.defaults.headers.common['X-CSRFToken'] = response.data.token\n  }).catch(err => {\n    console.log(err);\n  });\n});\n// let token = document.getElementsByName(\"csrfmiddlewaretoken\")\n\n// if (token) {\n//     API.defaults.headers.common['X-CSRFToken'] = token[0].value\n// }\n// else {\n//     console.error('CSRF token not found')\n// }\n\nAPI.interceptors.response.use(response => response, async err => {\n  console.log(err.response);\n  if (err.response.status === 401) {\n    this.$store.dispatch('refreshToken', {\n      refreshToken: this.$store.state.refreshToken\n    }).then(() => {\n      return API(err.config);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n});\nexport { API };","map":{"version":3,"names":["axios","API","create","withCredentials","baseURL","document","addEventListener","get","then","response","console","log","data","localStorage","setItem","token","catch","err","interceptors","use","status","$store","dispatch","refreshToken","state","config"],"sources":["/Users/elinaigdavletova/Documents/Интернет_программирование/GQW/frontend/vueapp/src/axios-api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API = axios.create({\n    withCredentials: true,\n    baseURL: 'http://127.0.0.1:8000/api/v1',\n    // headers: {\n    //     'Access-Control-Allow-Origin': '*',\n    //     'Access-Control-Allow-Headers': '*',\n    //     'Access-Control-Allow-Credentials': 'true',\n    // }\n})\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    API.get('/get-token/').then(response => {\n        console.log(response.data)\n        localStorage.setItem('csrfToken', response.data.token)\n        // API.defaults.headers.common['X-CSRFToken'] = response.data.token\n    }).catch(err => {\n        console.log(err)\n    })\n})\n// let token = document.getElementsByName(\"csrfmiddlewaretoken\")\n\n// if (token) {\n//     API.defaults.headers.common['X-CSRFToken'] = token[0].value\n// }\n// else {\n//     console.error('CSRF token not found')\n// }\n\nAPI.interceptors.response.use(response => response, async err => {\n    console.log(err.response)\n    if (err.response.status === 401) {\n        this.$store.dispatch('refreshToken', {\n            refreshToken: this.$store.state.refreshToken\n        }).then(() => {\n            return API(err.config)\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n})\n\nexport { API }"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;EACT;EACA;EACA;EACA;EACA;AACJ,CAAC,CAAC;;AAEFC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAW;EACrDL,GAAG,CAACM,GAAG,CAAC,aAAa,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAI;IACpCC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC;IAC1BC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEL,QAAQ,CAACG,IAAI,CAACG,KAAK,CAAC;IACtD;EACJ,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;IACZP,OAAO,CAACC,GAAG,CAACM,GAAG,CAAC;EACpB,CAAC,CAAC;AACN,CAAC,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAhB,GAAG,CAACiB,YAAY,CAACT,QAAQ,CAACU,GAAG,CAACV,QAAQ,IAAIA,QAAQ,EAAE,MAAMQ,GAAG,IAAI;EAC7DP,OAAO,CAACC,GAAG,CAACM,GAAG,CAACR,QAAQ,CAAC;EACzB,IAAIQ,GAAG,CAACR,QAAQ,CAACW,MAAM,KAAK,GAAG,EAAE;IAC7B,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,cAAc,EAAE;MACjCC,YAAY,EAAE,IAAI,CAACF,MAAM,CAACG,KAAK,CAACD;IACpC,CAAC,CAAC,CAACf,IAAI,CAAC,MAAM;MACV,OAAOP,GAAG,CAACgB,GAAG,CAACQ,MAAM,CAAC;IAC1B,CAAC,CAAC,CAACT,KAAK,CAACC,GAAG,IAAI;MACZP,OAAO,CAACC,GAAG,CAACM,GAAG,CAAC;IACpB,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEF,SAAShB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}